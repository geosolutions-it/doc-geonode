# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, GeoNode Development Team
# This file is distributed under the same license as the GeoNode package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoNode 2.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-15 18:26+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:4
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:4
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:28
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:43
msgid "Exercises"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:7
msgid "Components and Services"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:9
msgid "Hint, if ``bash-completion`` is installed, try <TAB><TAB> to get completions."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:16
msgid "start/stop services"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:28
msgid "basic psql interactions"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:31
msgid "OGC Standards"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:34
msgid "WMS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:36
msgid "Use the layer preview functionality in GeoServer to bring up a web map."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:37
msgid "Copy a the URL for the image in the map."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:38
msgid "Alter URL parameters for the request."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:39
msgid "Use *curl* to get the capabilities document"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:45
msgid "More: http://docs.geoserver.org/stable/en/user/services/wms/index.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:48
msgid "WFS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:50
msgid "Describe a feature type using curl (replace ws:name with your layer)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\exercises.rst:56
msgid "More: http://docs.geoserver.org/stable/en/user/services/wfs/reference.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:5
msgid "Introduction to GeoNode development"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:7
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:28
msgid "This module will introduce you to the components that GeoNode is built with, the standards that it supports and the services it provides based on those standards, and an overview its architecture."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:9
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:13
msgid "GeoNode is a web based GIS tool, and as such, in order to do development on GeoNode itself or to integrate it into your own application, you should be familiar with basic web development concepts as well as with general GIS concepts."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:11
msgid "A set of reference links on these topics is included at the end of this module."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:22
msgid "Development References"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:25
msgid "Basic Web based GIS Concepts and Background"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:27
msgid "OGC Services"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:29
msgid "http://www.opengeospatial.org/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:30
msgid "http://en.wikipedia.org/wiki/Open_Geospatial_Consortium"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:32
msgid "Web Application Architecture"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:34
msgid "http://en.wikipedia.org/wiki/Web_application"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:35
msgid "http://www.w3.org/2001/tag/2010/05/WebApps.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:36
msgid "http://www.amazon.com/Web-Application-Architecture-Principles-Protocols/dp/047051860X"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:38
msgid "AJAX and REST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:40
msgid "http://en.wikipedia.org/wiki/Ajax_(programming)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:41
msgid "http://en.wikipedia.org/wiki/Representational_state_transfer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:43
msgid "OpenGeo Suite"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:45
msgid "http://workshops.opengeo.org/suiteintro/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:46
msgid "http://suite.opengeo.org/opengeo-docs/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:48
msgid "GeoServer Administration"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:50
msgid "http://suite.opengeo.org/opengeo-docs/geoserver/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:51
msgid "https://docs.google.com/a/opengeo.org/presentation/d/15fvUDYg0TO6WGFQlMLM2J1qiTVBYpfjCp0aQBDT0GrM/edit#slide=id.g2e4bd7ac_0_35"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:52
msgid "http://suite.opengeo.org/docs/sysadmin/index.html#sysadmin"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:54
msgid "PostgreSQL and PostGIS Administration - http://workshops.opengeo.org/postgis-intro/ - http://workshops.opengeo.org/postgis-spatialdbtips/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:59
msgid "Core development tools and libraries"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:60
msgid "python"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:62
msgid "http://docs.python.org/2/tutorial/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:63
msgid "http://www.learnpython.org/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:64
msgid "http://learnpythonthehardway.org/book/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:66
msgid "django"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:68
msgid "https://docs.djangoproject.com/en/dev/intro/tutorial01/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:69
msgid "https://code.djangoproject.com/wiki/Tutorials"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:71
msgid "javascript"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:73
msgid "http://www.crockford.com/javascript/inheritance.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:74
msgid "http://geoext.org/tutorials/quickstart.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:76
msgid "jquery"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:78
msgid "http://www.w3schools.com/jquery/default.asp"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:79
msgid "http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:80
msgid "http://www.jquery-tutorial.net/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:82
msgid "bootstrap"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:84
msgid "http://twitter.github.io/bootstrap/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:85
msgid "http://www.w3resource.com/twitter-bootstrap/tutorial.php"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:87
msgid "geotools/geoscript/geoserver"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:89
msgid "http://docs.geotools.org/stable/tutorials/feature/csv2shp.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:90
msgid "http://geoscript.org/tutorials/index.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:91
msgid "http://docs.geotools.org/stable/tutorials/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:92
msgid "https://github.com/dwins/gsconfig.py/blob/master/README.rst"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:94
msgid "geopython"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:96
msgid "http://pycsw.org/docs/documentation.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:97
msgid "http://geopython.github.io/OWSLib/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:98
msgid "https://github.com/toblerity/shapely"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:99
msgid "https://github.com/sgillies/Fiona"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:100
msgid "http://pypi.python.org/pypi/pyproj"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:102
msgid "gdal/ogr"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:104
msgid "http://www.gdal.org/gdal_utilities.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\index.rst:105
msgid "http://www.gdal.org/ogr_utilities.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:4
msgid "Standards"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:6
msgid "GeoNode is based on a set of Open Geospatial Consortium (OGC) standards. These standards enable GeoNode installations to be interoperable with a wide variety of tools that support these OGC standards and enable federation with other OGC compliant services and infrastructure. Reference links about these standards are also included at the end of this module."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:8
msgid "GeoNode is also based on Web Standards ..."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:11
msgid "Open Geospatial Consortium (OGC) Standards"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:14
msgid "Web Map Service (WMS)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:16
msgid "The Web Map Service (WMS) specification defines an interface for requesting rendered map images across the web. It is used within GeoNode to display maps in the pages of the site and in the GeoExplorer application to display rendered layers based on default or custom styles."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:19
msgid "Web Feature Service (WFS)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:21
msgid "The Web Feature Service (WFS) specification defines an interface for reading and writing geographic features across the web. It is used within GeoNode to enable downloading of vector layers in various formats and within GeoExplorer to enable editing of Vector Layers that are stored in a GeoNode."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:24
msgid "Web Coverage Service (WCS)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:26
msgid "The Web Coverage Service (WCS) specification defines an interface for reading and writing geospatial raster data as \"coverages\" across the web. It is used within GeoNode to enable downloading of raster layers in various formats."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:29
msgid "Catalogue Service for Web (CSW)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:31
msgid "The Catalogue Service for Web (CSW) specification defines an interface for exposing a catalogue of geospatial metadata across the web. It is used within GeoNode to enable any application to search GeoNode's catalogue or to provide federated search that includes a set of GeoNode layers within another application."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:34
msgid "Tile Mapping Service (TMS/WMTS)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:36
msgid "The Tile Mapping Service (TMS) specification defines and interface for retrieving rendered map tiles over the web. It is used within geonode to enable serving of a cache of rendered layers to be included in GeoNode's web pages or within the GeoExplorer mapping application. Its purpose is to improve performance on the client vs asking the WMS for rendered images directly."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:39
msgid "Web Standards"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:42
msgid "HTML"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:44
msgid "**HyperText Markup Language**, commonly referred to as **HTML**, is the standard markup language used to create web pages. [1]_ Web browsers can read HTML files and render them into visible or audible web pages. HTML describes the structure of a website semantically along with cues for presentation, making it a markup language, rather than a programming language."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:51
msgid "HTML elements form the building blocks of all websites. HTML allows images and objects to be embedded and can be used to create interactive forms. It provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes and other items."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:57
msgid "The language is written in the form of HTML elements consisting of *tags* enclosed in angle brackets (like < >). Browsers do not display the HTML tags and scripts, but use them to interpret the content of the page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:62
msgid "HTML can embed scripts written in languages such as JavaScript which affect the behavior of HTML web pages. Web browsers can also refer to Cascading Style Sheets (CSS) to define the look and layout of text and other material. The World Wide Web Consortium (W3C), maintainer of both the HTML and the CSS standards, has encouraged the use of CSS over explicit presentational HTML since 1997."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:70
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:86
msgid "CSS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:72
msgid "**Cascading Style Sheets** (**CSS**) is a style sheet language used for describing the presentation of a document written in a markup language. [2]_ Although most often used to set the visual style of web pages and user interfaces written in HTML and XHTML, the language can be applied to any XML document, including plain XML, SVG and XUL, and is applicable to rendering in speech, or on other media. Along with HTML and JavaScript, CSS is a cornerstone technology used by most websites to create visually engaging webpages, user interfaces for web applications, and user interfaces for many mobile applications. [3]_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:83
msgid "CSS is designed primarily to enable the separation of document content from document presentation, including aspects such as the layout, colors, and fonts. [4]_ This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple HTML pages to share formatting by specifying the relevant CSS in a separate .css file, and reduce complexity and repetition in the structural content, such as semantically insignificant tables that were widely used to format pages before consistent CSS rendering was available in all major browsers. CSS makes it possible to separate presentation instructions from the HTML content in a separate file or style section of the HTML file. For each matching HTML element, it provides a list of formatting instructions. For example, a CSS rule might specify that “all heading 1 elements should be bold”, leaving pure semantic HTML markup that asserts “this text is a level 1 heading” without formatting code such as a ``<bold>`` tag indicating how such text should be displayed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:101
msgid "This separation of formatting and content makes it possible to present the same markup page in different styles for different rendering methods, such as on-screen, in print, by voice (when read out by a speech-based browser or screen reader) and on Braille-based, tactile devices. It can also be used to display the web page differently depending on the screen size or device on which it is being viewed. Although"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:110
msgid "REST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:112
msgid "In computing, **Representational State Transfer** (**REST**) is the software architectural style of the World Wide Web. [5]_ [6]_ [7]_ REST gives a coordinated set of constraints to the design of components in a distributed hypermedia system that can lead to a higher performing and more maintainable architecture."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:118
msgid "To the extent that systems conform to the constraints of REST they can be called RESTful. RESTful systems typically, but not always, communicate over the Hypertext Transfer Protocol with the same HTTP verbs (GET, POST, PUT, DELETE, etc.) which web browsers use to retrieve web pages and to send data to remote servers. [8]_ REST interfaces usually involve collections of resources with identifiers, for example ``/people/tom``, which can be operated upon using standard verbs, such as ``DELETE /people/tom``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:127
msgid "`Hypertext Markup Language | Definition of hypertext markup language by Merriam-Webster <http://www.merriam-webster.com/dictionary/hypertext%20markup%20language>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:129
msgid "`\"CSS developer guide\" <https://developer.mozilla.org/en-US/docs/Web/Guide/CSS>`_. Mozilla Developer Network. Retrieved 2015-09-24"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:131
msgid "`\"Web-based Mobile Apps of the Future Using HTML 5, CSS and JavaScript\" <http://www.htmlgoodies.com/beyond/article.php/3893911/Web-based-Mobile-Apps-of-the-Future-Using-HTML-5-CSS-and-JavaScript.htm>`_. HTMLGoodies. Retrieved October 2014."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:133
msgid "`\"What is CSS?\" <http://www.w3.org/standards/webdesign/htmlcss#whatcss>`_. World Wide Web Consortium. Retrieved December 2010."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:135
msgid "Fielding, R. T.; Taylor, R. N. (2000). \"Principled design of the modern Web architecture\". pp. 407–416. doi:`10.1145/337180.337228 <https://dx.doi.org/10.1145%2F337180.337228>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:137
msgid "Richardson, Leonard; Sam Ruby (2007), `RESTful web service <http://books.google.com/books?id=XUaErakHsoAC>`_, O'Reilly Media, `ISBN 978-0-596-52926-0 <https://en.wikipedia.org/wiki/Special:BookSources/978-0-596-52926-0>`_, retrieved 18 January 2011, The main topic of this book is the web service architectures which can be considered RESTful: those which get a good score when judged on the criteria set forth in Roy Fielding's dissertation.\""
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:139
msgid "Richardson, Leonard; Mike Amundsen (2013), `RESTful web APIs <http://www.amazon.com/RESTful-Web-APIs-Leonard-Richardson/dp/1449358063/ref=sr_1_1?ie=UTF8&qid=1442372039&sr=8-1&keywords=restful+web+apis>`_, O'Reilly Media, `ISBN 978-1-449-35806-8 <https://en.wikipedia.org/wiki/Special:BookSources/978-1-449-35806-8>`_, retrieved 15 September 2015, The Fielding disertation explains the decisions behind the design of the Web.\""
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\001_devel_intro\standards.rst:141
msgid "Fielding, Roy Thomas (2000). `\"Chapter 5: Representational State Transfer (REST)\" <http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm>`_. *Architectural Styles and the Design of Network-based Software Architectures* (Ph.D.). University of California, Irvine. This chapter introduced the Representational State Transfer (REST) architectural style for distributed hypermedia systems. REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems.\""
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:5
msgid "Getting Started With Django"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:8
msgid "Object-relational mapper"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:9
msgid "Data models can be defined entirely in Python. DJango makes available a rich, dynamic database-access API for free, but it is still possible to write SQL if needed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:11
msgid "The following documentation is based on official `documentation <https://docs.djangoproject.com/en>`_ of the project Django."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:13
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:48
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:110
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:138
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:181
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:225
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:258
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:277
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:301
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:319
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:346
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:377
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:407
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:445
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:466
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:493
msgid "The following examples are taken from the official Django documentation for the sole purpose of introducing the general concepts."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:37
msgid "Models"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:39
msgid "A model is a Python class containing the essential fields and behaviors of the data stored on the DB. Generally, each model maps to a single database table."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:41
msgid "Each model is a Python class that subclasses ``django.db.models.Model``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:42
msgid "Each attribute of the model represents a database field."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:43
msgid "A model is an automatically-generated database-access API; see :ref:`making_queries`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:46
msgid "Quick example"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:50
msgid "This example model defines a ``Person``, which has a **first_name** and **last_name**:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:61
msgid "**first_name** and **last_name** are fields of the model. Each field is specified as a class attribute, and each attribute maps to a database column."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:63
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:74
msgid "Some technical notes:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:76
msgid "The name of the table, **myapp_person**, is automatically derived from some model metadata but can be overridden."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:77
msgid "An **id** field is added automatically, but this behavior can be overridden."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:78
msgid "The **CREATE TABLE** SQL in this example is formatted using PostgreSQL syntax, but it’s worth noting Django uses SQL tailored to the database backend specified in the settings file."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:81
msgid "Using models"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:83
msgid "Once models have been defined, Django must be instructed on how to use those models. This is possible by editing the DJango settings file and changing the **INSTALLED_APPS** setting to add the name of the module that contains the **model class**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:86
msgid "For example, if the models for the application is defined in the module **myapp.models**, **INSTALLED_APPS** should read, in part:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:97
msgid "When you add new apps to **INSTALLED_APPS**, be sure to run **manage.py migrate**, optionally making migrations for them first with **manage.py makemigrations**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:99
msgid "GeoNode uses the specific command **manage.py syncdb** to perform the models update and migration."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:102
msgid "Fields"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:104
msgid "The list of DB fields is reflected (and specified) by the model class attributes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:106
msgid "Be careful not to choose field names that conflict with the models API like **clean**, **save**, or **delete**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:108
msgid "Example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:128
msgid "More: `Field Types <https://docs.djangoproject.com/en/1.8/topics/db/models/#field-types>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:131
msgid "Model methods"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:133
msgid "Custom methods on a model can be used to add custom “row-level” functionality to an object. This is a valuable technique for keeping business logic in one place."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:136
msgid "For example, the following model has a few **custom methods**:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:165
msgid "The last method in this example is a `property <https://docs.djangoproject.com/en/1.8/glossary/#term-property>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:167
msgid "The `model instance reference <https://docs.djangoproject.com/en/1.8/ref/models/instances/>`_ has a complete list of `methods automatically given to each model <https://docs.djangoproject.com/en/1.8/ref/models/instances/#model-instance-methods>`_. It is possible to override most of these; see `overriding predefined model methods <https://docs.djangoproject.com/en/1.8/topics/db/models/#overriding-predefined-model-methods>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:170
msgid "More: `Models Methods <https://docs.djangoproject.com/en/1.8/topics/db/models/#model-methods>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:175
msgid "`Making queries`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:177
msgid "Django automatically gives a database-abstraction API that allows to create, retrieve, update and delete objects."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:179
msgid "As an example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:217
msgid "Creating objects"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:219
msgid "As already said before, a model class represents a database table, and an instance of that class represents a particular record in the database table."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:221
msgid "To create an object, instantiate it using keyword arguments to the model class, then call **save()** to save it to the database."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:223
msgid "Assuming models live in a file **mysite/blog/models.py**, here’s an example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:234
msgid "This performs an **INSERT SQL** statement behind the scenes. Django doesn’t hit the database until you explicitly call **save()**. The **save()** method has no return value."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:243
msgid "This performs an **UPDATE SQL** statement behind the scenes. Django doesn’t hit the database until you explicitly call **save()**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:246
msgid "Retrieving objects"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:248
msgid "Retrieving objects from the database can be done by constructing a **QuerySet** via a **Manager** on the model class."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:250
msgid "A **QuerySet** represents a collection of objects from the database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a **QuerySet** equates to a **SELECT** statement, and a filter is a limiting clause such as **WHERE** or **LIMIT**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:254
msgid "Each model has at least one **Manager**, and it’s called ``objects`` by default."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:256
msgid "It can be accessed directly via the model class, like so:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:272
msgid "**Managers** are accessible only via model classes, rather than from model instances, to *enforce a separation* between “table-level” operations and “record-level” operations. The **Manager** is the main source of **QuerySets** for a model. For example, ``Blog.objects.all()`` returns a **QuerySet** that contains all Blog objects in the database."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:275
msgid "The simplest way to retrieve objects from a table is to get all of them. To do this, use the **all()** method on a **Manager**:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:284
msgid "The **all()** method returns a **QuerySet** of all the objects in the database. The **QuerySet** returned by **all()** describes all objects in the database table. To select only a subset of the complete set of objects, it must be refined by adding filter conditions."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:288
msgid "The two most common ways to refine a **QuerySet** are:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:290
msgid "**filter(**kwargs)**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:292
msgid "Returns a new **QuerySet** containing objects that match the given lookup parameters."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:294
msgid "**exclude(**kwargs)**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:296
msgid "Returns a new **QuerySet** containing objects that do not match the given lookup parameters. The lookup parameters (****kwargs** in the above function definitions) should be in the format described in **Field** lookups below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:299
msgid "For example, to get a **QuerySet** of blog entries from the year 2006, use **filter()** like so:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:308
msgid "With the default manager class, it is the same as:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:315
msgid "The result of refining a **QuerySet** is itself a **QuerySet**, so it’s possible to chain refinements together."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:317
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:38
msgid "For example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:332
msgid "This takes the initial **QuerySet** of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a **QuerySet** containing all entries with a headline that starts with “What”, that were published between January 30, 2005, and the current day."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:335
msgid "More: `Making queries <https://docs.djangoproject.com/en/1.8/topics/db/queries/#making-queries>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:338
msgid "URLs and views"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:340
msgid "A clean elegant URL scheme is an important detail in a high-quality Web application. Django encourages beautiful URL design and does not put junk in URLs, like .php or .asp."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:343
msgid "In DJango a Python module called URLconf is like a table of contents for the application. It contains a simple mapping between URL patterns and the **views**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:370
msgid "More: `URL dispatcher <https://docs.djangoproject.com/en/1.8/topics/http/urls/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:373
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:78
msgid "Templates"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:375
msgid "Django’s template language allows developers to put logic into the HTML:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:399
msgid "More: `Templates <https://docs.djangoproject.com/en/1.8/topics/templates/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:402
msgid "Forms"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:404
msgid "Django provides a library that handles rendering HTML forms, validation of data submitted by users, and converting the data to native Python types. Django also provides a way to generate forms from your existing models and to use these forms to create and update data."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:421
msgid "GET and POST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:423
msgid "**GET** and **POST** are the only HTTP methods to use when dealing with forms."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:425
msgid "Django’s login form is returned using the **POST** method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:427
msgid "**GET**, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:430
msgid "**GET** and **POST** are typically used for different purposes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:432
msgid "Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use **POST**. **GET** should be used only for requests that do not affect the state of the system."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:434
msgid "**GET** would also be unsuitable for a password form, because the password would appear in the URL, and thus, also in browser history and server logs, all in plain text. Neither would it be suitable for large quantities of data, or for binary data, such as an image. A Web application that uses **GET** requests for admin forms is a security risk: it can be easy for an attacker to mimic a form’s request to gain access to sensitive parts of the system. **POST**, coupled with other protections like Django’s CSRF protection offers more control over access."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:436
msgid "On the other hand, **GET** is suitable for things like a web search form, because the URLs that represent a **GET** request can easily be bookmarked, shared, or resubmitted."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:438
msgid "More: `Working With Forms <https://docs.djangoproject.com/en/1.8/topics/forms/#working-with-forms>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:441
msgid "Authentication"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:443
msgid "Django supports a full-featured and secure authentication system. It handles user accounts, groups, permissions and cookie-based user sessions."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:458
msgid "More: `User authentication in Django <https://docs.djangoproject.com/en/stable/topics/auth/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:461
msgid "Admin"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:463
msgid "One of the most powerful parts of Django is its automatic admin interface. It reads metadata from models in order to provide a powerful and ready-to-use GUI for **CRUD** operations against the model."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:482
msgid "The advanced workshop for Developers will provide more details on GeoNode specific models and admin interface"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:484
msgid "More: `The Django admin site <https://docs.djangoproject.com/en/stable/ref/contrib/admin/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:487
msgid "Internationalization"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:489
msgid "Django offers full support for translating text into different languages, plus locale-specific formatting of dates, times, numbers and time zones. It lets developers and template authors specify which parts of their apps should be translated or formatted for local languages and cultures, and it uses these hooks to localize Web applications for particular users according to their preferences."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:538
msgid "The advanced workshop for Developers will provide more details on how to create languages and translations on GeoNode using `Transifex <https://www.transifex.com/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:540
msgid "More: `Internationalization and localization <https://docs.djangoproject.com/en/stable/topics/i18n/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:543
msgid "Security"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:545
msgid "Django provides multiple protections against:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:550
msgid "Clickjacking"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:548
msgid "Clickjacking is a type of attack where a malicious site wraps another site in a frame. This attack can result in an unsuspecting user being tricked into performing unintended actions on the target site."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:550
msgid "The **X-Frame-Options middleware** contained in a form allow a supporting browser to prevent a site from being rendered inside a frame"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:553
msgid "Cross site scripting (XSS)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:553
msgid "XSS attacks allow a user to inject client side scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database where it will be retrieved and displayed to other users, or by getting users to click a link which will cause the attacker’s JavaScript to be executed by the user’s browser. However, XSS attacks can originate from any untrusted source of data, such as cookies or Web services, whenever the data is not sufficiently sanitized before including in a page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:558
msgid "Cross site request forgery (CSRF)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:556
msgid "CSRF attacks allow a malicious user to execute actions using the credentials of another user without that user’s knowledge or consent."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:558
msgid "CSRF protection works by checking for a nonce in each POST request. This ensures that a malicious user cannot simply “replay” a form POST to your Web site and have another logged in user unwittingly submit that form. The malicious user would have to know the nonce, which is user specific (using a cookie)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:561
msgid "SQL injection"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:561
msgid "SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted or data leakage."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:569
msgid "Host header validation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:564
msgid "Django uses the **Host** header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake **Host** value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:567
msgid "Because even seemingly-secure web server configurations are susceptible to fake **Host** headers, Django validates **Host** headers against the **ALLOWED_HOSTS** setting in the ``django.http.HttpRequest.get_host()`` method."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:569
msgid "This validation only applies via **get_host()**; if your code accesses the Host header directly from **request.META** you are bypassing this security protection."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:574
msgid "SSL/HTTPS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:572
msgid "It is always better for security, though not always practical in all cases, to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases – active network attackers – to alter data that is sent in either direction."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:574
msgid "Django provides some settings to secure your site unser SSL/HTTPS."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:577
msgid "While Django provides good security protection out of the box, it is still important to properly deploy your application and take advantage of the security protection of the Web server, operating system and other components."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:579
msgid "Make sure that your Python code is outside of the Web server’s root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:580
msgid "Take care with any user uploaded files."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:581
msgid "Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:582
msgid "Keep your **SECRET_KEY** a secret."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:583
msgid "It is a good idea to limit the accessibility of your caching system and database using a firewall."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\getting_started_w_django.rst:585
msgid "More: `Security in Django <https://docs.djangoproject.com/en/stable/topics/security/>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\index.rst:5
msgid "Django Overview"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\index.rst:6
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:31
msgid "This section introduces some basic concepts of DJango, the Python based web framework on top of which GeoNode has been developed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\index.rst:8
msgid "The main objective of Django is to facilitate the creation of complex sites oriented databases. Django emphasizes reusability and \"pluggability\" of components, rapid development, and the principle of not repeating yourself. Python is used everywhere, even for settings, files, and data models."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\002_django_overview\index.rst:10
msgid "Django also provides an administrative interface to create, read, update and delete models that is dynamically generated by introspection and configured through the Administrative Templates."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:4
msgid "GeoNode's Core Modules"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:6
msgid "GeoNode is made up of a set of core Django pluggable modules (known as apps in Django) that provide the functionality of the application. Together they make up the key components of a GeoNode site. While your own use case and implementation may not require that you work directly on these modles, it is important that you become familiar with their layout, structure and the functionality that they provide. You may need to import these apps into your own apps, and as such, becoming familiar with them is an important step in becoming a proficient GeoNode developer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:9
msgid "geonode.layers"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:11
msgid "geonode.layers is the most key GeoNode module. It is used to represent layers of data stored in a GeoNode's paired GeoServer. The layer model class inherits fields from the ResourceBase class which provides all of the fields necessary for the metadata catalogue, and adds fields that map the object to its corresponding layer in GeoServer. When your users upload a layer via the user interface, the layer is imported to GeoServer and a record is added to GeoNode's database to represent that GeoServer layer within GeoNode itself."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:13
msgid "The Layer model class provides a set of helper methods that are used to perform operations on a Layer object, and also to return things such as the list of Download or Metadata links for that layer. Additional classes are used to model the layers Attributes, Styles, Contacts and Links. The Django signals framework is used to invoke specific functions to synchronize with GeoServer before and after the layer is saved."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:15
msgid "The views in the layers app are used to perform functions such as uploading, replacing, removing or changing the points of contact for a layer, and views are also used to update layer styles, download layers in bulk or change a layers permissions."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:17
msgid "The forms module in the layer app is used to drive the user interface forms necessary for performing the business logic that the views provide."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:19
msgid "The Layers app also includes a set of templates that are paired with views and used to drive the user interface. A small set of layer template tags is also used to help drive the layer explore and search pages."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:21
msgid "Some helper modules such as geonode.layers.metadata and geonode.layers.ows are used by the layer views to perform specific functions and help keep the main views module more concise and legible."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:23
msgid "Additionally, the GeoNode specific management commands are a part of the geonode.layers app."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:25
msgid "You should spend some time to review the layers app through GitHubs code browsing interface."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:27
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:40
msgid "https://github.com/GeoNode/geonode/tree/master/geonode/layers"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:30
msgid "geonode.maps"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:32
msgid "The geonode.maps app is used to group together GeoNodes multi layer map functionality. The Map and MapLayer objects are used to model and implement maps created with the GeoExplorer application. The Map object also extends from the ResourceBase class which provides the ability to manage a full set of metadata fields for a Map."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:34
msgid "The views in the maps app perform many of the same functions as the views in the layers app such as adding, changing, replacing or removing a map and also provide the endpoints for returning the map configuration from the database that is used to initialize the GeoExplorer app."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:36
msgid "The maps app also includes a set of forms, customization of the Django admin, some utility functions and a set of templates and template tags."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:38
msgid "You can familiarize yourself with the maps app on GitHub."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:43
msgid "geonode.security"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:45
msgid "The geonode.security app is used to provide object level permissions within the GeoNode Django application. It is a custom Django authentication backend and is used to assign Generic, User and Group Permissions to Layers, Maps and other objects in the GeoNode system. Generic permissions are used to enable public anonymous or authenticated viewing and/or editing of your data layers and maps, and User and Group specific permissions are used to allow specific users or groups to access and edit your layers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:48
msgid "geonode.search"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:50
msgid "The geonode.search module provides the search API that is used to drive the GeoNode search pages. It is configured to index layers, maps, documents and profiles, but is extensible to allow you to use it to index your own model classes. This module is currently based on the Django ORM and as such has a limited set of search features, but the GeoNode development team is actively working on making it possible to use this module with more feature-rich search engines."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:53
msgid "geonode.catalogue"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:55
msgid "The geonode.catalogue app provides a key set of metadata catalogue functions within GeoNode itself. GeoNode is configured to use an integrated version of the pycsw library to perform these functions, but can also be configured to use any OGC compliant CS-W implementation such as GeoNetwork or Deegree. The metadata app allows users to import and/or edit metadata for their layers, maps and documents, and it provides an OGC compliant search interface for use in federating with other systems."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:58
msgid "geonode.geoserver"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:60
msgid "The geonode.geoserver module is used to interact with GeoServer from within GeoNode's python code. It relies heavily on the gsconfig library which addresses GeoServer's REST configuration API. Additionally, the geonode.geoserver.uploader module is used to interact with GeoServers Importer API for uploading and configuring layers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:63
msgid "geonode.people"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:65
msgid "The geonode.people module is used to model and store information about both GeoNode users and people outside of the system who are listed as Points of Contact for particular layers. It is the foundational module for GeoNode's social features. It provides a set of forms for users to edit and manage their own profiles as well as to view and interact with the profiles of other users."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:68
msgid "geoexplorer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:70
msgid "GeoNode's core GIS client functions are performed by GeoExplorer. The GeoExplorer app is in turn based on GeoExt, OpenLayers and ExtJS. It provides functionality for constructing maps, styling layers and connecting to remote services. GeoExplorer is the reference implementation of the OpenGeo Suite SDK which is based on GXP. GeoNode treats GeoExplorer as an external module that is used out of the box in GeoNode, but it is possible for you to create your own Suite SDK app and integrate it with GeoNode."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:73
msgid "Static Site"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:75
msgid "The front end of GeoNode is composed of a set of core templates, specific templates for each module, cascading style sheets to style those pages and a set of javascript modules that provide the interactive functionality in the site."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:80
msgid "GeoNode includes a basic set of core templates that use Django's template inheritance system to provide a modular system for constructing the web pages in GeoNode's interface. These core templates drive the overall page layout and things like the home page. You will start the process of customizing your GeoNode instance by overriding these templates, so you should familiarize yourself with their tructure and how they inherit from each other to drive the pages."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:83
msgid "Additionally, most of the apps described above have their own set of templates that are used to drive the pages for each module. You may also want to override these templates for your own purposes and as such should familiarize yourself with a few of the key ones."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:88
msgid "GeoNode's css is based on Twitter's Bootstrap Library which uses the lessc dynamic stylesheet language. GeoNode extends from the basic Boostrap style and you are able to create your own bootstrap based style to customize the look and feel of your own GeoNode instance. Sites like bootswatch.com also provide ready made styles that you can simply drop in to your project to change the style."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:91
msgid "Javascript"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\coremodules.rst:93
msgid "The interactive functionality in GeoNode pages is provided by the jQuery javascript framework and a set of jQuery plugins. The core set of GeoNode javascript modules closely aligns with the apps described above, and there are also a few pieces of functionality provided as javascript modules that are used through out all of the apps. You are able to add your own jQuery code and/or plugins to perform interactive functionality in your own application."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:7
msgid "Shell and Utilities"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:9
msgid "*ssh* into your virtual machine or other instance"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:10
msgid "*sudo* to modify the *sshd_config* settings to verify disabling of dns resolution (UseDNS=no)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:11
msgid "install a command line helper"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:17
msgid "exercise command completion"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:23
msgid "activate/deactivate the *virtualenv* on your instance"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:30
msgid "set the *DJANGO_SETTINGS_MODULE* env variable"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:36
msgid "install the *httpie* utility via pip"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:46
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\python.rst:4
msgid "Python"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:48
msgid "launch *ipython* and experiment"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\exercises.rst:57
msgid "execute a script with *ipython* and open the REPL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\index.rst:4
msgid "Development Prerequsites and Core Modules"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\index.rst:6
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:40
msgid "This module will introduce you to the basic tools and skills required to start actively developing GeoNode."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:4
msgid "GeoNode's Development Prerequisites"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:7
msgid "Basic Shell Tools"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:10
msgid "ssh and sudo"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:12
msgid "ssh and sudo are very basic terminal skills which you will need to deploy, maintain and develop with GeoNode. If you are not already familiar with their usage, you should review the basic descriptions below and follow the external links to learn more about how to use them effectively as part of your development workflow."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:14
msgid "*ssh* is the network protocol used to connect to a remote server where you run your GeoNode instance whether on your own network or on the cloud. You will need to know how to use an the ssh command from the terminal on your unix machine or how to use a ssh client like putty or winscp on windows. You may need to use pki certificates to connect to your remove server, and should be familiar with the steps and options necessary to connect this way. More information about ssh can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:16
msgid "http://winscp.net/eng/docs/ssh"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:18
msgid "*sudo* is the command used to execute a terminal command as the superuser when you are logged in with a normal user. You will to use sudo in order to start, stop and restart key services on your GeoNode instance. If you are not able to grant yourself these privileges on the machine you are using for your GeoNode instance, you may need to consult with your network administrator to arrange for your user to be granted sudo permissions. More information about sudo can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:20
msgid "http://en.wikipedia.org/wiki/Sudo"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:23
msgid "bash"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:25
msgid "*Bash* is the most common unix shell which will usually be the default on servers where you will be deploying your GeoNode instance. You should be familiar with the most common bash commands in order to be able to deploy, maintain and modify a geonode instance. More information about Bash and common bash commands can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:27
msgid "http://en.wikipedia.org/wiki/Bash_(Unix_shell)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:31
msgid "apt"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:33
msgid "*apt* is the packaging tool that is used to install GeoNode on ubuntu and other debian based systems. You will need to be familiar with adding Personal Package Archives to your list of install sources, and will need to be familiar with basic apt commands. More information about apt can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:35
msgid "http://en.wikipedia.org/wiki/Advanced_Packaging_Tool"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:39
msgid "Python Development Tools"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:41
msgid "The GeoNode development process relies on several widely used python development tools in order to make things easier for developers and other users of the systems that GeoNode developers work on or where GeoNodes are deployed. They are considered best practices for modern python development, and you should become familiar with these basic tools and be comfortable using them on your own projects and systems."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:45
msgid "virtualenv"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:47
msgid "*virtualenv* is a tool used to create isolated python development environments such that the the versions of project dependencies are sandboxed from the system-wide python packages. This eliminates the commonly encountered problem of different projects on the same system using different versions of the same library. You should be familiar with how to create and activate virtual environments for the projects you work on. More information about virtualenv can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:49
msgid "http://pypi.python.org/pypi/virtualenv"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:50
msgid "http://www.virtualenv.org/en/latest/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:52
msgid "*virtualenvwrapper* is a wrapper around the virtualenv package that makes it easier to create and switch between virtual environments as you do development. Using it will make your life much easier, so its recommended that you install and configure it and use its commands as part of your virtualenv workflow. More info about virtualenvwrapper can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:54
msgid "http://www.doughellmann.com/projects/virtualenvwrapper/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:58
msgid "pip"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:60
msgid "*pip* is a tool for installing and managing python packages. Specifically it is used to install and upgrade packages found in the Python Pacakge Index. GeoNode uses pip to install itself, and to manage all of the python dependencies that are needed as part of a GeoNode instance. As you learn to add new modules to your geonode, you will need to become familiar with the use of pip and about basic python packaging usage. More information about pip can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:62
msgid "http://www.pip-installer.org/en/latest/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:63
msgid "http://pypi.python.org/pypi/pip"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:64
msgid "http://en.wikipedia.org/wiki/Pip_(Python)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:68
msgid "miscellaneous"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:70
msgid "*ipython* is a set of tools to make your python development and debugging experience easier. The primary tool you want to use is an interactive shell that adds introspection, integrated help and command completion and more. While not strictly required to do GeoNode development, learning how to use ipython will make your development more productive and pleasant. More information about ipython can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:72
msgid "http://ipython.org/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:73
msgid "http://pypi.python.org/pypi/ipython"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:74
msgid "https://github.com/ipython/ipython"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:75
msgid "http://en.wikipedia.org/wiki/IPython"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:77
msgid "*pdb* is a standard python module that is used to interactively debug your python code. It supports setting conditional breakpoints so you can step through the code line by line and inspect your variables and perform arbitrary execution of statements. Learning how to effectively use pdb will make the process of debugging your application code significantly easier. More information about pdb can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:79
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:74
msgid "http://docs.python.org/2/library/pdb.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:83
msgid "Django"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:85
msgid "GeoNode is built on top of the *Django web framework*, and as such, you will need to become generally familiar with Django itself in order to become a productive GeoNode developer. Django has excellent documentation, and you should familiarize yourself with Django by following the Django workshop and reading through its documentation as required."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:89
msgid "Model Template View"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:91
msgid "Django is based on the Model Template View paradigm (more commonly called Model View Controller). Models are used to define objects that you use in your application and Django's ORM is used to map these models to a database. Views are used to implement the business logic of your application and provide objects and other context for the templates. Templates are used to render the context from views into a page for display to the user. You should become familiar with this common paradigm used in most modern web frameworks, and how it is specifically implemented and used in Django. The Django tutorial itself is a great place to start. More information about MTV in Django can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:93
msgid "http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:94
msgid "http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:95
msgid "https://docs.djangoproject.com/en/1.4/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:99
msgid "HTTP Request Response"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:101
msgid "Django and all other web frameworks are based on the HTTP Request Response cycle. Requests come in to the server from remote clients which are primarily web browsers, but also can be api clients, and the server returns with a Response. You should be familiar with these very basic HTTP principles and become familiar with the way that Django implements them. More information about HTTP, Requests and Responses and Djangos implementation in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:103
msgid "http://devhub.fm/http-requestresponse-basics/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:104
msgid "http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:105
msgid "https://docs.djangoproject.com/en/dev/ref/request-response/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:109
msgid "Management Commands"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:111
msgid "Django projects have access to a set of management commands that are used to manage your project. Django itself provides a set of these commands, and django apps (including GeoNode) can provide their own. Management commands are used to do things like synchronize your models with your database, load data from fixtures or back up your database with fixtures, start the development server, initiate the debugger and many other things. GeoNode provides management commands for synchronizing with a GeoServer or updating the layers already in your GeoNode. You should become familiar with the basic management commands that come with Django, and specifically with the commands that are part of GeoNode. The GeoNode specific commands are covered in section. More information about management commands can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:113
msgid "https://docs.djangoproject.com/en/dev/ref/django-admin/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:117
msgid "Django Admin Interface"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:119
msgid "Django provides a build-in management console that administrators and developers can use to look at the data in the database that is part of the  installed applications. Administrators can use this console to perform many common administration tasks that are a necessary part of running a GeoNode instance, and as a developer, you will use this interface during your development process to inspect the database and the data stored in your models. More information about the django admin interface can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:121
msgid "https://docs.djangoproject.com/en/dev/ref/contrib/admin/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:125
msgid "Template Tags"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:127
msgid "Django templates make use of a set of tags to inject, filte and format content into a rendered HTML page. Django itself includes a set of built-in template tags and filters that you will use in your own templates, and GeoNode provides a geonode specific set of tags that are used in the GeoNode templates. You should become familiar with the built-in tag set and with GeoNode's specific tags as you work on developing your own templates or extending from GeoNode's. More information about Django template tags can be found in the links below."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\003_devel_core\prerequisites.rst:129
msgid "https://docs.djangoproject.com/en/dev/ref/templates/builtins/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:4
msgid "Install GDAL for Development"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:6
msgid "In order to install GDAL (1.10.0+) in developing mode, in a virtual environment, on Ubuntu 12.04 the following steps may be required.  If you have already tried any of the approaches suggested elsewhere, it is recommended that, unless you know that this may affect other software, you do a full purge of any existing GDAL-related packages."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:8
msgid "Install GDAL in your host environment"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:18
msgid "Test that GDAL is installed in your host environment"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:25
msgid "Take note of the GDAL Version"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:27
msgid "Assuming that your geonode directory is installed directly off of your home directory, download and configure GDAL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\gdal_install.rst:38
msgid "Test that GDAL is installed in your virtual environment"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:4
msgid "Install GeoNode for Development"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:7
msgid "In order to install Geonode 2.0 in developing mode on Ubuntu 12.04 the following steps are required:"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:9
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:47
msgid "For Windows: (:ref:`install_win_devmode`)"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:11
msgid "Summary of the installation steps"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:13
#: ..\..\005_dev_workshop\004_devel_env\index.rst:36
msgid "Retrieve latest apt-get list"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:14
#: ..\..\005_dev_workshop\004_devel_env\index.rst:42
msgid "Install build tools and libraries"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:15
msgid "Install dependencies (Python, Postgresql and Java) and supporting tools"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:16
#: ..\..\005_dev_workshop\004_devel_env\index.rst:181
msgid "Add Nodejs PPA and other tools required for static development"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:17
msgid "Set up a virtual environment (virtualenv)"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:18
msgid "Clone geonode from github and install it in the virtual environment"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:19
msgid "Run paver to get install geoserver and start the development servers"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:20
msgid "Compile and Start the server"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:21
msgid "Start Geonode instance"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:22
#: ..\..\005_dev_workshop\004_devel_env\index.rst:351
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:125
msgid "To stop the server"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:23
#: ..\..\005_dev_workshop\004_devel_env\index.rst:361
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:133
msgid "Next create a superuser for your django geonode"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:25
msgid "The following steps have to be executed in your terminal. The steps have to be done as a **root user**, therefore don´t forget to type sudo in front!"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:27
#: ..\..\005_dev_workshop\004_devel_env\index.rst:330
#: ..\..\005_dev_workshop\004_devel_env\index.rst:396
msgid "Don't forget to stop the **GeoNode Production** services if enabled"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:34
msgid "If possible log as **root** user, open a terminal and ``cd /home/geonode/dev``"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:48
msgid "Install dependencies"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:50
msgid "*Python native dependencies*"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:56
msgid "*Install Python Virtual Environment*"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:62
msgid "*Postgresql*"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:64
msgid "The following steps must be executed **only** if you don't have PostgreSQL and PostGIS already installed on your system (see :ref:`install_geonode_application`)"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:70
msgid "Change postgres UNIX password"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:80
msgid "Create geonode role and database"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:101
msgid "Edit PostgreSQL configuration file ::"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:105
msgid "Scroll to the bottom of the file and edit this line ::"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:110
msgid "As follows ::"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:115
msgid "Restart PostgreSQL to make the changes effective ::"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:119
msgid "*Java dependencies*"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:121
msgid "The following steps must be executed **only** if you don't have a Java JDK or JRE already installed on your system (see :ref:`install_geonode_application`)"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:127
msgid "*supporting tools*"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:133
msgid "Set up a virtual environment"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:135
msgid "Here is where Geonode will later be running."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:137
msgid "Add the virtualenvwrapper to your new environement."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:149
msgid "On Ubuntu, you can add the above settings to your .bashrc file and reload the settings running"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:160
msgid "Set up the local virtual environment for Geonode"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:167
msgid "This creates a new directory where you want your project to be and creates a new virtualenvironment"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:169
msgid "Get the code"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:171
msgid "To download the latest geonode version from github, the command *clone* is used"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:174
msgid "If you are following the GeoNode training, skip the following command. You can find the cloned repository in /home/geonode/dev"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:183
msgid "This is required for static development"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:186
msgid "If you are following GeoNode's training, nodejs is already installed in the Virtual Machine skip the first three command and jump to `cd geonode/geonode/static`"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:210
msgid "Every time you want to update the static files after making changes to the sources, go to geonode/static and run 'grunt production'."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:212
msgid "Install GeoNode in the new active local virtualenv"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:222
msgid "If the install fails because of an error related to pyproj not being verified (happens on pip 1.5), use the following:"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:228
msgid "Create ``local_settings.py``"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:230
msgid "Add the ``local_settings.py`` to your GeoNode instllation"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:238
msgid "Add the following lines to the ``local_settings.py``"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:311
msgid "Compile and Start the server for the first time"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:313
msgid "Align the DataBase structure"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:320
#: ..\..\005_dev_workshop\004_devel_env\index.rst:349
msgid "If the start fails because of an import error related to osgeo, then please consult the :ref:`install_gdal_devmode`."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:322
msgid "The last step is to compile GeoServer and setup"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:328
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:113
msgid "Now we can start our geonode instance"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:341
msgid "Visit the geonode site by typing http://localhost:8000 into your browser window."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:343
msgid "If you are using a different IP address (e.g 1.1.1.1), then start paver using the command below."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:353
msgid "type hold **Ctrl c**  on your keyboard to stop the server"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:355
msgid "now type:"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:363
msgid "Create a superuser so you can log on to your local geonode installation at http://localhost:8000"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:370
msgid "Start working on Geonode the next day after install"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:372
msgid "With every restart of your machine, you have to restart geonode as well. That means, you will not be able to open http://localhost:8000   directly after starting your machine new. In order to be able to use geonode now, you have to activate your virtualenvironment and to start the development servers."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:374
msgid "*username* is the name of your machine and personal folder!"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:376
msgid "Activate virtualenv"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:378
msgid "To activate your virtualenv you just need to type"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:386
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:14
msgid "or"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:392
msgid "Be careful with the path, it might not be the same for you!"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:394
msgid "Start the server"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:409
msgid "Now you are able to access http://localhost:8000 again."
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:411
msgid "Remember that you have to do these steps each time you restart your machine!!"
msgstr ""

#: ..\..\005_dev_workshop\004_devel_env\index.rst:413
msgid "Now you've followed these installation instructions, geonode is running in development mode. This also means that you are using all the default settings of geonode. If you want to change them, e.g use Tomcat instead of Jetty, or Postgresql instead of sqlite3, you may follow the steps from the section **Configure Manually** in :ref:`geonode_install`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:4
msgid "Install GeoNode for Development (Windows)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:6
msgid "In order to install Geonode 2.0 in developing mode on Windows 2008r2 the following steps are required:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:8
msgid "install dependencies (Python and Java) and supporting tools"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:10
msgid "set up a virtual environment (virtualenv)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:12
msgid "clone geonode from github and install it in the virtual environment"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:14
msgid "run paver to get install geoserver and start the development servers"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:16
msgid "The following steps have to be executed in your terminal where there is a \">\". The path will differ depending on installation."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:18
msgid "Install Dependencies.  All should be found in binary.  Only 32 bit versions have been tested."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:20
msgid "Latest Python 2.7.x Windows build https://www.python.org/download/releases/2.7.7/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:22
msgid "Setuptools http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:24
msgid "Install core components of GDAL http://www.gisinternals.com/sdk/PackageList.aspx?file=release-1600-gdal-1-11-mapserver-6-4.zip gdal-111-1600-core.msi"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:30
msgid "Install Java for Geoserver.  If you already have java installed 32 or 64 bit versions work."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:32
msgid "http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:34
msgid "Ant and Maven are optional for custom builds of Geoserver"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:36
msgid "Install Supporting tools"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:38
msgid "Git http://git-scm.com/downloads"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:40
msgid "GetText (not tested yet)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:42
msgid "Install node and tools for static development (not tested yet)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:44
msgid "http://nodejs.org/download/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:46
msgid "In the command prompt do the following: Will we need to be admins?"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:66
msgid "Get the GeoNode Code using Git."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:57
msgid "Open the Git bash or use your command prompt depending on how git was installed This command will download the latest version of GeoNode.  For the most recent stable version type number 2."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:105
msgid "Install all Dependencies in a new virtual environment"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:69
msgid "In the command prompt, navigate to where you want your python to be installed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:75
msgid "Command not found?  Try adding your python scripts folder to the path environment variable.  In most cases it is C:\\Python27\\Scripts.  You will need to start a fresh command prompt to register the variables.  See next common error message to add the C:\\Python27 path"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:77
msgid "Errors about no package found and running python from the command prompt gives command not found, then add C:\\Python27 to your path environment variable."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:79
msgid "Initialize the virtual environment by navigating to your-virtualenv-directory/Scripts/activate"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:81
msgid "After you activate the virtual environment, run the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:87
msgid "Navigate to your geonode code install and run"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:93
msgid "*Back to the parent directory*"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:107
msgid "Set up the Geoserver with command"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:119
msgid "Visit the geonode site by typing http://localhost:8000 into your browser window."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:121
msgid "If the start fails because of an import error related to osgeo, then ensure that the GDAL_LIBRARY_PATH is set in the Windows path."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:123
msgid "If you get GEOSversion function not found, then need to need to change line 71 in geonode\\Lib\\site-packages\\Shapely-1.3.0-py2.7-win32.egg\\shapely\\geos.py from _lgeos = CDLL(\"geos.dll\") to _lgeos = CDLL(\"geos_c.dll\").  See issue https://github.com/Toblerity/Shapely/issues/136"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:127
msgid "type hold Ctrl c on your keyboard to stop the server"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\004_devel_env\win_devinstall.rst:135
msgid "Create a superuser so you can log on to your local geonode installation at http://localhost:8000"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:4
msgid "Debugging GeoNode in the Browser"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:6
msgid "This section covers some techniques for debugging browser and Django related response bugs using the Firefox web browser extension named Firebug. The concepts covered apply to other browser's tools but may vary in terminology."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:10
msgid "Another Firefox extension worth noting is 'jsonview'. This extension supports formatted viewing of JSON responses and integrates well with Firebug."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:13
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:10
msgid "References:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:15
msgid "https://getfirebug.com/faq/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:16
msgid "http://jsonview.com/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:19
msgid "Net Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:21
msgid "The net tab allows viewing all of the network traffic from the browser. The subtabs (like the selected \"Images\" tab) allow filtering by the type of traffic."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:26
msgid "Firebug Net Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:28
msgid "In this screen-shot, the mouse hover displays the image content and the full URL requested. One can right-click to copy-paste the URL or view in a separate tab. This is useful for obtaining test URLs. The grayed out entries show that the resource was cached via conditional-get (the 304 not modified). Other very useful advanced information includes the size of the response and the loading indicator graphics on the right. At the bottom, note the total size and timing information."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:31
msgid "Net Tab Exercises"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:33
msgid "Go to layers/maps/search pages and look at the various requests. Note the XHR subtab. Look at the various request specific tabs: headers, params, etc."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:36
msgid "Use the 'disable browser cache' option and see how it affects page loads. Discuss advantages/challenges of caching."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:41
msgid "DOM Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:43
msgid "The DOM tab displays all of the top-level window objects. By drilling down, this can be a useful way to find out what's going on in a page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:48
msgid "Firebug DOM Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:50
msgid "In this example, the mouse is hovering over the ``app`` object. Note the high level view of objects and their fields. The console tab allows interacting with the objects."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:53
msgid "DOM Tab Exercises"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:55
msgid "Drill down in the DOM tab."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:56
msgid "Use the console to interactively exercise jquery."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:57
msgid "Use the console to interact with the app/map or other page objects"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:60
msgid "Script Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:62
msgid "The script tab allows viewing scripts and debugging."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:67
msgid "The screen-shot displays a breakpoint set at line 3, the current code is stopped at line 8 and the mouse hover is displaying the value of the variable 'class_list'. On the right, the 'Watch' tab displays the various variables and scopes and offers a drill down view similar to the DOM view. The stack tab displays the execution stack context outside the current frame."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:70
msgid "Script Tab Exercises"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:72
msgid "Step through some code"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:73
msgid "Look at various features: variables, scopes, DOM drill-down"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:76
msgid "HTML Tab"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:78
msgid "The HTML tag allows viewing and drilling down into the DOM. This is an incredibly useful feature when doing CSS or HTML work."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:83
msgid "The screen-shot displays a search result 'article' element highlighted with padding and margin in yellow and purple. The DOM structure is displayed on the left and the right panel displays the specific style rules while the computed tab displays the effective style rules. The layout tab displays rulers and property values while the DOM tab displays a debug/DOM-like view of the actual object's properties."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:86
msgid "HTML Tab Exercises"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:88
msgid "Identify elements, look at the tabs on the right"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:89
msgid "Change styles, add new rules and styles"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\browser.rst:90
msgid "Edit existing HTML elements via the raw and tree-view"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:4
msgid "Debugging GeoExplorer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:6
msgid "In case you want to debug the GeoExplorer behaviour in your browser with Firebug of Chromium Developer toolbar, you may do the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:9
msgid "Install Boundless Suite::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:15
msgid "Run GeoExplorer in debug mode::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:20
msgid "Check if GeoExplore is running at this url: http://localhost:9080"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:22
msgid "Edit the ``layers/templates/layers/layer_geoext_map.html`` file and replace this line::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoexplorer.rst:27
msgid "with this one::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:4
msgid "Debugging GeoServer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:6
msgid "Resources:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:8
msgid "http://docs.geoserver.org/stable/en/user/advanced/logging.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:9
msgid "http://docs.geoserver.org/stable/en/user/production/troubleshooting.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:11
msgid "This section does not attempt to cover developer-level debugging in GeoServer as this is a much larger topic involving many more tools. The goal here is to provide 'black-box' techniques to help resolve and report problems."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:16
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:8
msgid "Logging"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:18
msgid "GeoServer logging, while sometimes containing too much information, is the best way to start diagnosing an issue in GeoNode once the other. To create a proper error report for use in requesting support, providing any contextual logging information is critical."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:23
msgid "When using a standard geoserver installation, the GeoServer logs are located at :file:`/usr/share/geoserver/data/logs/geoserver.log`. The properties files that control the varying rules are also located here."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:30
msgid "Switch logging levels for various loggers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:31
msgid "Look at the different logging profiles and discuss the loggers and levels."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:32
msgid "Learn how to read stacktraces, nested or otherwise."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:35
msgid "Advanced Troubleshooting"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:37
msgid "JVM diagnostics and advanced troubleshooting techniques are covered in the GeoServer documents linked to above. When providing information for a bug report, these can be helpful but in-depth Java knowledge is required to fully comprehend the output from some of these tools."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:45
msgid "Look at jstack output"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:48
msgid "Using Django to Help Debug"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\geoserver.rst:50
msgid "The gsconfig library provides a rich interface to interacting with GeoServer's REST API. This allows high-level functions as well as viewing raw REST responses."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:4
msgid "GeoNode debugging techniques"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:6
msgid "GeoNode can be difficult to debug as there are several different components involved:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:9
msgid "Browser - includes HTML/CSS issues, JavaScript, etc."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:10
msgid "Django - GeoNode HTML views and web APIs"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:11
msgid "GeoServer - Core Wxx services and Platform REST APIs"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:13
msgid "When attempting to diagnose a specific problem, often the order of investigation mirrors the order above - that is, start with the client: Is this a bug in code running on the browser. If not, step to the next level: the Django responses to client requests. Often this is possible via the browser using the correct tools. Many requests require Django communications with GeoServer. This is the next stage of investigation if a specific bug does not appear to originate in Django or the client."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\index.rst:21
msgid "The following section covers techniques to help diagnose and debug errors."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:4
msgid "Debugging GeoNode's Python Components"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:12
msgid "http://docs.python.org/2/library/logging.html"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:13
msgid "https://docs.djangoproject.com/en/1.4/topics/logging/"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:15
msgid "Logging is controlled by the contents of the logging data structure defined in the :file:`settings.py`. The default settings distributed with GeoNode are configured to only log errors. During development, it's a good idea to override the logging data structure with something a bit more verbose."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:21
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:64
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:211
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:288
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:391
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:445
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:488
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:565
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:621
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:653
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:735
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:803
msgid "Output"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:23
msgid "In production, logging output will go into the apache error log. This is located in :file:`/var/log/apache2/error.log`. During development, logging output will, by default, go to standard error."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:28
msgid "Configuring"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:30
msgid "Ensure the 'console' handler is at the appropriate level. It will ignore log messages below the set level."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:32
msgid "Ensure the specific logger you'd like to use is set at the correct level."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:33
msgid "If attempting to log SQL, ensure ``DEBUG=True`` in your :file:`local_settings.py`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:36
msgid "Debugging SQL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:38
msgid "To trace all SQL in django, configure the ``django.db.backends`` logger to ``DEBUG``"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:40
msgid "To examine a specific query object, you can use the ``query`` field: str(Layer.objects.all().query)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:42
msgid "You can gather more information by using ``django.db.connection.queries``. When ``DEBUG`` is enabled, query SQL and timing information is stored in this list."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:46
msgid "Hints"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:48
msgid "Don't use print statements. They are easy to use in development mode but in production they will cause failure."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:50
msgid "Take advantage of python. Instead of:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:56
msgid "Use:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:63
msgid "Excercises:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:65
msgid "Enable logging of all SQL statements. Visit some pages and view the logging output."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:66
msgid "Using the python shell, use the ``queries`` object to demonstrate the results of specific queries."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:70
msgid "PDB"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:72
msgid "Reference:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:76
msgid "For the adventurous, ``pdb`` allows for an interactive debugging session. This is only possible when running in a shell via ``manage.py runserver`` or ``paver runserver``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:80
msgid "To set a breakpoint, insert the following code before the code to debug."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\005_devel_debug\python.rst:86
msgid "When execution reaches this statement, the debugger will activate. The commands are noted in the link above. In addition to those debugger specific commands, general python statements are supported. For example, typing the name of a variable in scope will yield the value via string coersion. Typing \"n\" will execute the next line, \"c\" wil continue the execution of the program, \"q\" will quit."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:5
msgid "gsconfig"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:7
msgid "gsconfig is a python library for manipulating a GeoServer instance via the GeoServer RESTConfig API."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:9
msgid "The project is distributed under a `MIT License <LICENSE.txt>`_ ."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:12
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:10
msgid "Installing"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:18
msgid "For developers:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:27
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:21
msgid "Getting Help"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:28
msgid "There is a brief manual at http://boundlessgeo.github.io/gsconfig/ . If you have questions, please ask them on the GeoServer Users mailing list: http://geoserver.org/comm/ ."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:31
msgid "Please use the Github project at http://github.com/boundlessgeo/gsconfig for any bug reports (and pull requests are welcome, but please include tests where possible.)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:34
msgid "Sample Layer Creation Code"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:58
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:26
msgid "Running Tests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:60
msgid "Since the entire purpose of this module is to interact with GeoServer, the test suite is mostly composed of `integration tests <http://en.wikipedia.org/wiki/Integration_testing>`_. These tests necessarily rely on a running copy of GeoServer, and expect that this GeoServer instance will be using the default data directory that is included with GeoServer. This data is also included in the GeoServer source repository as ``/data/release/``. In addition, it is expected that there will be a postgres database available at ``postgres:password@localhost:5432/db``. You can test connecting to this database with the ``psql`` command line client by running ``$ psql -d db -Upostgres -h localhost -p 5432`` (you will be prompted interactively for the password.)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:66
msgid "To override the assumed database connection parameters, the following environment variables are supported:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:68
msgid "DATABASE"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:69
msgid "DBUSER"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:70
msgid "DBPASS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:72
msgid "If present, psycopg will be used to verify the database connection prior to running the tests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:74
msgid "If provided, the following environment variables will be used to reset the data directory:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:77
msgid "GEOSERVER_HOME"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:77
msgid "Location of git repository to read the clean data from. If only this option is provided `git clean` will be used to reset the data."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:80
msgid "GEOSERVER_DATA_DIR"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:80
msgid "Optional location of the data dir geoserver will be running with. If provided, `rsync` will be used to reset the data."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:85
msgid "GS_VERSION"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:83
msgid "Optional environment variable allowing the catalog test cases to automatically download and start a vanilla GeoServer WAR form the web. Be sure that there are no running services on HTTP port 8080."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:87
msgid "Here are the commands that I use to reset before running the gsconfig tests:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:100
msgid "At this point, GeoServer will be running foregrounded, but it will take a few seconds to actually begin listening for http requests. You can stop it with ``CTRL-C`` (but don't do that until you've run the tests!) You can run the gsconfig tests with the following command:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:108
msgid "Instead of restarting GeoServer after each run to reset the data, the following should allow re-running the tests:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:116
msgid "More Examples - Updated for GeoServer 2.4+"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:118
msgid "Loading the GeoServer ``catalog`` using ``gsconfig`` is quite easy. The example below allows you to connect to GeoServer by specifying custom credentials."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:125
msgid "The code below allows you to create a FeatureType from a Shapefile"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:146
msgid "It is possible to create JDBC Virtual Layers too. The code below allow to create a new SQL View called ``my_jdbc_vt_test`` defined by a custom ``sql``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:165
msgid "This example shows how to easily update a ``layer`` property. The same approach may be used with every ``catalog`` resource"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:174
msgid "Deleting a ``store`` from the ``catalog`` requires to purge all the associated ``layers`` first. This can be done by doing something like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:184
msgid "There are some functionalities allowing to manage the ``ImageMosaic`` coverages. It is possible to create new ImageMosaics, add granules to them, and also read the coverages metadata, modify the mosaic ``Dimensions`` and finally query the mosaic ``granules`` and list their properties."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:187
msgid "The gsconfig methods map the `REST APIs for ImageMosaic <http://docs.geoserver.org/stable/en/user/rest/examples/curl.html#uploading-and-modifying-a-image-mosaic>`_"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:189
msgid "In order to create a new ImageMosaic layer, you can prepare a zip file containing the properties files for the mosaic configuration. Refer to the GeoTools ImageMosaic Plugin guide in order to get details on the mosaic configuration. The package contains an already configured zip file with two granules. You need to update or remove the ``datastore.properties`` file before creating the mosaic otherwise you will get an exception."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:199
msgid "By defualt the ``cat.create_imagemosaic`` tries to configure the layer too. If you want to create the store only, you can specify the following parameter"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:205
msgid "In order to retrieve from the catalog the ImageMosaic coverage store you can do this"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:211
msgid "It is possible to add more granules to the mosaic at runtime. With the following method you can add granules already present on the machine local path."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:218
msgid "The method below allows to send granules remotely via POST to the ImageMosaic. The granules will be uploaded and stored on the ImageMosaic index folder."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:225
msgid "To delete an ImageMosaic store, you can follow the standard approach, by deleting the layers first. *ATTENTION*: at this time you need to manually cleanup the data dir from the mosaic granules and, in case you used a DB datastore, you must also drop the mosaic tables."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:236
msgid "The method below allows you the load and update the coverage metadata of the ImageMosaic. You need to do this for every coverage of the ImageMosaic of course."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:245
msgid "By default the ImageMosaic layer has not the coverage dimensions configured. It is possible using the coverage metadata to update and manage the coverage dimensions. *ATTENTION*: notice that the ``presentation`` parameters accepts only one among the following values {'LIST', 'DISCRETE_INTERVAL', 'CONTINUOUS_INTERVAL'}"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:255
msgid "One the ImageMosaic has been configures, it is possible to read the coverages along with their granule schema and granule info."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:266
msgid "The granules details can be easily read by doing something like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsconfig.rst:276
msgid "When the mosaic grows up and starts having a huge set of granules, you may need to filter the granules query through a CQL filter on the coverage schema attributes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:5
msgid "gsimporter"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:7
msgid "gsimporter is a python library for using GeoServer's importer API."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:12
msgid "pip install gsconfig"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:16
msgid "git clone https://github.com/boundlessgeo/gsimporter.git cd gsimporter pip install ."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:23
msgid "Please use the Github project at http://github.com/boundlessgeo/gsimporter for any bug reports (and pull requests are welcome, but please include tests where possible.)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:28
msgid "The tests are integration tests. These require having a running GeoServer instance with the community/importer modules installed. Because some of the tests use a postgres database, a data base is required to run. **It is strongly advised to run with a data directory you don't care about.**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:30
msgid "The test suite will first attempt to verify a connection to GeoServer and a connection to the database. If the default values are not appropriate, provide them via environment variables on the command line or via `export`. For example::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:34
msgid "A convenient way to deal with connection or other settings (besides setting things up to use the defaults) is to put them all in a bash (or other shell) script."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:36
msgid "The tests are designed to create a workspace named `importer` and `importer2` for use in testing. `importer` will be set to the default workspace. As much as possible, things are cleaned up after test execution."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:38
msgid "To run all of the tests, one way is via `setup.py`. `python setup.py test` should do the trick."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:40
msgid "If developing and finer grained control is desired, specific tests and other flags can be provided using `python test/uploadtests.py`. Supported arguments are:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:42
msgid "**--clean** delete layers and stores in the test workspaces. useful for cleanup."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:43
msgid "**--skip-teardown** don't delete things after running. may cause errors but useful for a single test."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\gsimporter.rst:45
msgid "To run a single case (or drop the method name to run the whole class)::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geonode\index.rst:4
msgid "GeoNode's Ad-Hoc API"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:4
msgid "cURL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:6
msgid "The examples in this section use `cURL <http://curl.haxx.se/>`_, a command line tool for executing HTTP requests and transferring files, to generate requests to GeoServer's REST interface. Although the examples are based on cURL, they could be adapted for any HTTP-capable tool or library. Please be aware, that cURL acts not entirely the same as a web-browser. In contrast to Mozilla Firefox or Google Chrome cURL will not escape special characters in your request-string automatically. To make sure, that your requests can be processed correctly, make sure, that characters like paranthesis, commas and the like are escaped before sending them via cURL. If you use libcurl in PHP 5.5 or newer you can prepare the url-string using the function curl_escape. In older versions of PHP hmlspecialchars should do the job also."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:19
msgid "Adding a new workspace"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:21
msgid "The following creates a new workspace named \"acme\" with a POST request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:23
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:84
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:213
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:244
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:331
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:385
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:436
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:486
msgid "Each code block below contains a single command that may be extended over multiple lines."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:29
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:92
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:168
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:195
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:219
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:229
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:283
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:337
msgid "If executed correctly, the response should contain the following::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:35
msgid "Note the ``Location`` response header, which specifies the location (URI) of the newly created workspace."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:37
msgid "The workspace information can be retrieved as XML with a GET request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:43
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:102
msgid "The response should look like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:66
msgid "This shows that the workspace can contain \"``dataStores``\" (for :ref:`vector data <data_vector>`), \"``coverageStores``\" (for :ref:`raster data <data_raster>`), and \"``wmsStores``\" (for :ref:`cascaded WMS servers <data_external_wms>`)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:70
msgid "The ``Accept`` header is optional. The following request omits the ``Accept`` header, but will return the same response as above."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:78
msgid "Uploading a shapefile"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:80
msgid "In this example a new store will be created by uploading a shapefile."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:82
msgid "The following request uploads a zipped shapefile named :download:`roads.zip <resources/shapefiles/roads.zip>` and creates a new store named ``roads``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:90
msgid "The ``roads`` identifier in the URI refers to the name of the store to be created. To create a store named ``somethingelse``, the URI would be  ``http://localhost/geoserver/rest/workspaces/acme/datastores/somethingelse/file.shp``"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:96
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:341
msgid "The store information can be retrieved as XML with a GET request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:127
msgid "By default when a shapefile is uploaded, a feature type is automatically created. The feature type information can be retrieved as XML with a GET request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:133
msgid "If executed correctly, the response will be:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:148
msgid "The remainder of the response consists of layer metadata and configuration information."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:150
msgid "Notice that the name of the Layer (and of the FeatureType) corresponds to the physical name of the ShapeFile contained into the archive."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:154
msgid "Adding an existing shapefile"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:156
msgid "In the previous example a shapefile was uploaded directly to GeoServer by sending a zip file in the body of a PUT request. This example shows how to publish a shapefile that already exists on the server."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:158
msgid "Consider a directory on the server ``/data/shapefiles`` that contains the shapefile ``rivers.shp``. The following adds a new store for the shapefile:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:160
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:187
msgid "In order to execute the exercise, create a folder ``shapefiles`` somewhere on the server and extract there the :download:`shapefiles.zip <resources/shapefiles/shapefiles.zip>`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:166
msgid "The ``external.shp`` part of the request URI indicates that the file is coming from outside the catalog."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:172
msgid "The shapefile will be added to the existing store and published as a layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:174
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:199
msgid "To verify the contents of the store, execute a GET request. Since the XML response only provides details about the store itself without showing its contents, execute a GET request for HTML:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:181
msgid "Adding a directory of existing shapefiles"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:183
msgid "This example shows how to load and create a store that contains a number of shapefiles, all with a single operation. This example is very similar to the example above of adding a single shapefile."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:185
msgid "Consider a directory on the server ``/data/shapefiles`` that contains multiple shapefiles. The following adds a new store for the directory."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:193
msgid "Note the ``configure=all`` query string parameter, which sets each shapefile in the directory to be loaded and published."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:207
msgid "Creating a layer style"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:209
msgid "This example will create a new style on the server and populate it the contents of a local SLD file."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:211
msgid "The following creates a new style named ``roads_style``:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:223
msgid "This request uploads a file called :download:`roads.sld <resources/roads.sld>` file and populates the ``roads_style`` with its contents:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:233
msgid "The SLD itself can be downloaded through a a GET request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:240
msgid "Changing a layer style"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:242
msgid "This example will alter a layer style. Prior to making any changes, it is helpful to view the existing configuration for a given layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:246
msgid "The following retrieves the \"acme:roads\" layer information as XML:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:252
msgid "The response in this case would be:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:273
msgid "When the layer is created, GeoServer assigns a default style to the layer that matches the geometry of the layer. In this case a style named ``line`` is assigned to the layer. This style can viewed with a WMS request::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:277
msgid "In this next example a new style will be created called ``roads_style`` and assigned to the \"acme:roads\" layer:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:287
msgid "The new style can be viewed with the same WMS request as above::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:291
msgid "Note that if you want to upload the style in a workspace (ie, not making it a global style), and then assign this style to a layer in that workspace, you need first to create the style in the given workspace::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:296
msgid "Upload the file within the workspace::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:300
msgid "And finally apply that style to the layer. Note the use of the ``<workspace>`` tag in the XML::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:305
msgid "Adding a PostGIS database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:307
msgid "In this example a PostGIS database named ``nyc`` will be added as a new store."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:309
msgid "This section assumes that a PostGIS database named ``nyc`` is present on the local system and is accessible by the user ``bob``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:311
msgid "In order to create and setup the database locally, follow the instructions at :ref:`setup_nyc_db`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:313
msgid "Create a new text file and add the following content to it. This will represent the new store. Save the file as :file:`nycDataStore.xml`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:329
msgid "The following will add the new PostGIS store to the GeoServer catalog:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:347
msgid "The response should look like the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:377
msgid "Adding a PostGIS table"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:379
msgid "In this example a table from the PostGIS database created in the previous example will be added as a featuretypes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:381
msgid "This example assumes the table has already been created and the ``tiger_roads`` Layer deleted in case you have executed the previous steps."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:383
msgid "The following adds the table ``tiger_roads`` as a new feature type:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:393
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:444
msgid "The featuretype information can be retrieved as XML with a GET request:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:399
msgid "This layer can viewed with a WMS GetMap request::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:405
msgid "Creating a PostGIS table"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:407
msgid "In the previous example, a new feature type was added based on a PostGIS table that already existed in the database. The following example will not only create a new feature type in GeoServer, but will also create the PostGIS table itself."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:409
msgid "Create a new text file and add the following content to it. This will represent the definition of the new feature type and table. Save the file as :file:`annotations.xml`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:434
msgid "This request will perform the feature type creation and add the new table:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:442
msgid "The result is a new, empty table named \"annotations\" in the \"nyc\" database, fully configured as a feature type."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:451
msgid "Creating a layer group"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:453
msgid "This example assumes the tables has already been created and the ``tiger_roads``, ``poly_landmarks``, ``poi``, ``giant_polygon`` Layers have been created."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:463
msgid "In this example a layer group will be created, based on layers that already exist on the server."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:465
msgid "Create a new text file and add the following content to it. This file will represent the definition of the new layer group. Save the file as :file:`nycLayerGroup.xml`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:484
msgid "The following request creates the new layer group:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:492
msgid "The argument ``-d@filename.xml`` in this example is used to send a file as the body of an HTTP request with a POST method. The argument ``-T filename.xml`` used in the previous example was used to send a file as the body of an HTTP request with a PUT method."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:494
msgid "This layer group can be viewed with a WMS GetMap request::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:500
msgid "Retrieving component versions"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:502
msgid "This example shows how to retrieve the versions of the main components: GeoServer, GeoTools, and GeoWebCache:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:504
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:537
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:550
msgid "The code block below contains a single command that is extended over multiple lines."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:510
msgid "The response will look something like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:532
msgid "Retrieving manifests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:534
msgid "This collection of examples shows how to retrieve the full manifest and subsets of the manifest as known to the ClassLoader."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:543
msgid "The result will be a very long list of manifest information. While this can be useful, it is often desirable to filter this list."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:546
msgid "Filtering over resource name"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:548
msgid "It is possible to filter over resource names using regular expressions. This example will retrieve only resources where the ``name`` attribute matches ``gwc-.*``:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:556
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:610
msgid "The result will look something like this (edited for brevity):"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:600
msgid "Filtering over resource properties"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:602
msgid "Filtering is also available over resulting resource properties. This example will retrieve only resources with a property equal to ``GeoServerModule``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:604
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:637
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:803
msgid "The code blocks below contain a single command that is extended over multiple lines."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:626
msgid "It is also possible to filter against both property and value. To retrieve only resources where a property named ``GeoServerModule`` has a value equal to ``extension``, append the above request with ``&value=extension``:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:633
msgid "Uploading and modifying a image mosaic"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:635
msgid "The following command uploads a :download:`polyphemus.zip` file containing the definition of a mosaic (along with at least one granule of the mosaic to initialize the resolutions, overviews and the like) and will configure all the coverages in it as new layers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:643
msgid "The following instead instructs the mosaic to harvest (or re-harvest) a single file into the mosaic, collecting its properties and updating the mosaic index:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:649
msgid "Harvesting can also be directed towards a whole directory, as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:655
msgid "The image mosaic index structure can be retrieved using something like:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:661
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:822
msgid "which will result in the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:721
msgid "Listing the existing granules can be performed as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:727
msgid "This will result in a GML description of the granules, as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:786
msgid "Removing all the granules originating from a particular file (a NetCDF file can contain many) can be done as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:793
msgid "Creating an empty mosaic and harvest granules"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:795
msgid "The next command uploads an :download:`empty.zip` file. This archive contains the definition of an empty mosaic (no granules in this case) through the following files::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:802
msgid "**Make sure to update the datastore.properties file** with your connection params and refresh the zip when done, before uploading it."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:804
msgid "The configure=none parameter allows for future configuration after harvesting"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:810
msgid "The following instead instructs the mosaic to harvest a single :download:`polyphemus_20120401.nc` file into the mosaic, collecting its properties and updating the mosaic index:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:816
msgid "Once done you can get the list of coverages/granules available on that store."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:831
msgid "Next step is configuring ONCE for coverage (as an instance NO2), an available coverage."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:837
msgid "Where coverageconfig.xml may look like this"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:845
msgid "When specifying only the coverage name, the coverage will be automatically configured"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:849
msgid "Master Password Change"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:851
msgid "The master password can be fetched wit a GET request."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:857
msgid "A generated master password may be **-\"}3a^Kh**. Next step is creating an XML file."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:859
msgid "File changes.xml"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\curl.rst:868
msgid "Changing the master password using the file:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\index.rst:4
msgid "REST configuration examples"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\index.rst:6
msgid "This section contains a number of examples which illustrate various uses of the :ref:`REST configuration API <rest_api>`. The examples are grouped by the language or environment used."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\java.rst:4
msgid "Java"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\java.rst:6
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\python.rst:6
msgid "We are looking for volunteers to flesh out this section with examples."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\java.rst:8
msgid "In the meantime, anyone looking to do Java scripting of the GeoServer REST API should use `GeoServer Manager <https://github.com/geosolutions-it/geoserver-manager/wiki/>`_, a REST client library with minimal dependencies on external libraries."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\java.rst:10
msgid "Another option is `gsrcj <http://code.google.com/p/gsrcj/>`_.  This project is a GeoServer REST client written in Java with no extra dependencies on GeoServer/GeoTools, unlike the standard GeoServer REST module.  The project has minimal documentation, but does include a `Quickstart <http://code.google.com/p/gsrcj/wiki/Quickstart>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:4
msgid "PHP"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:6
msgid "The examples in this section use the server-side scripting language `PHP <http://php.net/index.php/>`_, a popular language for dynamic webpages. PHP has `cURL functions <http://php.net/manual/en/ref.curl.php/>`_ , as well as `XML functions <http://www.php.net/manual/en/refs.xml.php/>`_, making it a convenient method for performing batch processing through the Geoserver REST interface. The following scripts execute single requests, but can be easily modified with looping structures to perform batch processing."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:9
msgid "In order to execute the examples just copy the script content into a ``test.php`` file and execute the following command:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:16
msgid "POST with PHP/cURL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:18
msgid "The following script attempts to add a new workspace."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:70
msgid "The logfile should look something like::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:95
msgid "If the cURL request fails, a code other than 201 will be returned. Here are some possible values:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:99
msgid "Code"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:99
msgid "Meaning"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:101
msgid "0"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:101
msgid "Couldn't resolve host; possibly a typo in host name"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:103
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:743
msgid "201"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:103
msgid "Successful POST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:105
msgid "30x"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:105
msgid "Redirect; possibly a typo in the URL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:107
msgid "401"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:107
msgid "Invalid username or password"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:109
msgid "405"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:109
msgid "Method not Allowed: check request syntax"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:111
msgid "500"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:111
msgid "Geoserver is unable to process the request, e.g. the workspace already exists, the xml is malformed, ..."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:115
msgid "For other codes see `cURL Error Codes <http://curl.haxx.se/libcurl/c/libcurl-errors.html>`_ and `HTTP Codes <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:118
msgid "GET with PHP/cURL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:120
msgid "The script above can be modified to perform a GET request to obtain the names of all workspaces by replacing the code blocks for required settings, data and return code with the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:137
msgid "The logfile should now include lines like::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:144
msgid "DELETE with PHP/cURL"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:146
msgid "To delete the (empty) workspace we just created, the script is modified as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\php.rst:170
msgid "The log file will include lines like::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\python.rst:8
msgid "In the meantime, anyone looking to do python scripting of the GeoServer REST config API should use `gsconfig.py <https://github.com/dwins/gsconfig.py/wiki>`_. It is quite capable, and is used in production as part of `GeoNode <http://geonode.org>`_, so examples can be found in that codebase. Documentation and examples can be found at the section :ref:`geonode_lib_apis`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:4
msgid "Ruby"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:6
msgid "The examples in this section use `rest-client <http://github.com/archiloque/rest-client>`_, a REST client for Ruby. There is also a project to create a GeoServer-specific REST client in Ruby: `RGeoServer <https://github.com/rnz0/rgeoserver>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:8
msgid "Once installed on a system, ``rest-client`` can be included in a Ruby script by adding ``require 'rest-client'``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:11
msgid "GET and PUT Settings"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:13
msgid "In order to execute the example just copy the script content into a ``test.ruby`` file and execute the following command:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\ruby.rst:19
msgid "This example shows how to read the settings using GET, make a change and then use PUT to write the change to the server."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:4
msgid "Create and Prepare the *nyc* Example DataBase"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:6
msgid "This small section contains a step-by-step guide for the creation and population of an database containing few geospatial tables of New York City:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:8
msgid "giant_polygon"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:9
msgid "poi"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:10
msgid "poly_landmarks"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:11
msgid "tiger_roads"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:13
msgid "Log as *postgres* system user"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:19
msgid "Create the role **bob** with password *postgres*"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:25
msgid "Create the database **nyc** with the geospatial extensions"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:34
msgid "Restore the tables into the database from the :download:`dump <resources/nyc.dump>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\examples\setup_nyc_db.rst:40
msgid "Test that everything is ok by connecting to the database and listing the tables"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:7
msgid "Introducing REST concepts"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:9
msgid "REST (REpresentational State Transfer) is a simple approach to web services strongly based on the basic HTTP infrastructure, such as URLs, HTTP methods and HTTP response codes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:12
msgid "The basic elements of a REST service are:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:14
msgid "**Resource**: each business entity is linked to a unique URL that represents it, and allows for its retrieval and eventual modification. In GeoServer such resources are layers, stores, styles and so on"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:17
msgid "**Connectedness**: the various resources are linked to one another following significant relationships. For example, in GeoServer a store contains a list of feature types or coverages, a layer is linked to a style and a feature type/coverage, and so on (in other terms, the set of resources is supposed to be crawable just like a web site)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:21
msgid "**Representation**: each resource can be represented in one or more way. For example in GeoServer resources are normally represented as HTML, XML and JSON."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:23
msgid "**Stateless-ness**: each communication with the server is atomic and not related to the communications happened before or after it. Whatever state needs to be managed needs to be stored as a publicly accessible resource."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:26
msgid "**HTTP methods reuse**: each resource is manipulated via the common HTTP methods each having a common meaning, summarized by the following table"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:33
msgid "**Method**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:34
msgid "**Description**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:35
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:66
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:213
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:289
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:392
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:446
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:489
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:566
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:622
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:654
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:736
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:804
msgid "GET"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:36
msgid "Retrieves the resource in the specified representation. Query parameters are often used to filter the contents of the returned resource, and sometimes to specify the desired representation format."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:37
msgid "HEAD"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:38
msgid "Similar to GET, but instead of returning the full response it returns only the HTTP headers, which might contain information such as the last modification date of the resource"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:39
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:225
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:397
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:659
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:809
msgid "PUT"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:40
msgid "Stores the representation of a resource at a given URL. Used when the client already knows what the final URL of the resource will be"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:41
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:72
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:219
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:294
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:741
msgid "POST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:42
msgid "Creates a new resource by either getting its contents in the request, or having some parameters to compute it. The main different is that the final URL of the created resource is not known to the client, and is returned by the server after creation via a redirect. It is also used to have the server perform certain actions that cannot be encoded as another method, for example, have it send a SMS (assuming creating a resource representing the SMS is not desirable)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:43
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:234
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:402
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:494
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:814
msgid "DELETE"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:44
msgid "Destroys the specified resource."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:46
msgid "The above results in a web services protocols that is easy to understand, implement and connect to from various languages, and with good scalability characteristics."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:49
msgid "The GeoServer rest interface is located at ``http://localhost:8083/geoserver/rest``, by default a browser will show resources in HTML format allowing for a simple browsable interface to the GeoServer configuration."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:51
msgid "http://localhost:8083/geoserver/rest"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:55
msgid "Browsing the REST interface with HTML format"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:57
msgid "Follow the links into ``workspaces`` and then ``geosolutions`` and switch the format from ``.html`` to ``xml`` to see the XML representation:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:59
msgid "http://localhost:8083/geoserver/rest/workspaces/geosolutions.xml"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\introducing_rest.rst:63
msgid "The GeoSolutions workspace represented as XML"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\rest.rst:5
msgid "GeoServer REST interface"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\rest.rst:7
msgid "This module is a walkthrough the GeoServer REST capabilities and APIs. Here also will be presented and deeply inspected several methods and frameworks to handle with REST APIs and functions."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\rest.rst:10
msgid "**What you will learn**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\rest.rst:12
msgid "In this section you will learn:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:5
msgid "Using REST module"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:7
msgid "This section contains a number of examples which illustrate various uses of the REST data configuration api."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:9
msgid "The GeoServer REST configuration module uses the REST principles to expose services allowing to edit the catalog, in particular to manage workspaces, stores, layers, styles and groups."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:13
msgid "The REST configuration extension has normally to be installed separately, it is not come out of the box."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:15
msgid "The examples in this section use the `cURL <http://curl.haxx.se/>`_ utility, which is a handy command line tool for executing HTTP requests and transferring files."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:18
msgid "Open the Terminal and enter the following command::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:22
msgid "the response should contains the following:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:26
msgid "Create a new workspace via REST"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:28
msgid "Go to the ``Workspaces`` section via Web interface to show the new workspace created"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:32
msgid "GET request to abtain new workspace details"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:34
msgid "Get the new created workspace details entering the following::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:40
msgid "GET request to obtain new workspace details"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:42
msgid "Publish the shapefile :download:`pointlands <resources/pointlands.zip>` using the ``myworkspace`` workspace entering the following"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:44
msgid "Linux::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:48
msgid "Windows::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:52
msgid "Go to the **Layer Preview** to show the layers in a OpenLayers Map."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:56
msgid "Showing the new layer created"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:60
msgid "The new layers created"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:62
msgid "If you previously followed the security portion of the workshop the layer won't be accessible because the administrator does not have the required roles. Go back in the service security section and remove the rule limiting the GetMap requests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:64
msgid "Retrieves the created data store as XML entering the following::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:90
msgid "By default when a shapefile is uploaded a feature type resource and the associated layer are automatically created."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:92
msgid "Retrieve the layer as XML entering the following::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:117
msgid "When the layer is created a default style named ``point`` is assigned to it."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:119
msgid "Create a new style named ``landmarks`` with the following SLD (using the GeoServer Admin UI):"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:165
msgid "Apply the existing ``landmarks`` style to the layer created ``myworkspace:pointlands`` (this operation does not overwrite the entire layer definition, updates it instead)::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:169
msgid "Go to the **Layer Preview** to show the layers with the new ``landmarks`` style."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\geoserver_rest\using_rest.rst:173
msgid "Viewing the layers with the new created style ``landmarks``"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:4
msgid "Supported data formats"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:6
msgid "The importer supports any format that GeoServer can use a data store or coverage store. These include the most commonly used formats:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:9
msgid "Shapefile"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:10
msgid "GeoTIFF"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:12
msgid "And a few additional formats:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:14
msgid "CSV"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:15
msgid "KML"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:17
msgid "The following databases are supported:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:19
msgid "PostGIS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:20
msgid "Oracle"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:21
msgid "Microsoft SQL Server"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:25
msgid "Oracle and SQL Server require extra drivers to be installed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:27
msgid ":ref:`Install instructions for Oracle <data_oracle>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\formats.rst:28
msgid ":ref:`Install instructions for SQL Server <data_sqlserver>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:4
msgid "Importer interface reference"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:6
msgid "The Layer Importer user interface is a component of the GeoServer web interface. You can access it from the GeoServer web interface by clicking the :guilabel:`Import Data` link, found on the left side of the screen after logging in."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:9
msgid "Data sources page"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:11
msgid "The front page of the Layer Importer is where the data source and format are set. The following options are displayed:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:14
msgid "Choose a data source to import from"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:16
msgid "Select one of the following data sources to use for the import:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:18
msgid ":guilabel:`Spatial Files` (see :ref:`extensions_importer_formats` for more details)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:19
msgid ":guilabel:`PostGIS` database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:20
msgid ":guilabel:`Oracle` database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:21
msgid ":guilabel:`SQL Server` database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:25
msgid "Choose a data source"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:27
msgid "The contents of the next section is dependent on the data source chosen here."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:30
msgid "Configure the data source: Spatial Files"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:32
msgid "There is a single box for selecting a file or directory. Click the :guilabel:`Browse` link to bring up a file chooser. To select a file, click on it. To select a directory, click on a directory name to open it and then click :guilabel:`OK`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:36
msgid "Spatial file data source"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:40
msgid "File chooser for selecting spatial files"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:43
msgid "Configure the data source: PostGIS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:45
msgid "Fill out fields for :guilabel:`Connection type` (Default or JNDI) :guilabel:`Host`, :guilabel:`Port`, :guilabel:`Database` name, :guilabel:`Schema`, :guilabel:`Username` to connect with, and :guilabel:`Password`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:47
msgid "There are also advanced connection options, which are common to the standard PostGIS store loading procedure. (See the `PostGIS data store <../../geoserver/data/database/>`_ page in the GeoServer reference documentation.)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:51
msgid "PostGIS data source connection"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:54
msgid "Configure the data source: Oracle"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:56
msgid "The parameter fields for the Oracle import are identical to that of PostGIS. The fields aren't populated with default credentials with the exception of the port, which is set to **1521** by default."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:58
msgid "This option is only enabled if the :ref:`Oracle <data_oracle>` extension is installed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:62
msgid "Oracle data source connection"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:65
msgid "Configure the data source: SQL Server"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:67
msgid "The parameter fields for the SQL Server import are identical to that of PostGIS. The fields aren't populated with default credentials with the exception of the port, which is set to **4866** by default."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:69
msgid "This option is only enabled if the :ref:`SQL Server <data_sqlserver>` extension is installed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:73
msgid "SQL Server data source connection"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:76
msgid "Specify the target for the import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:78
msgid "This area specifies where in the GeoServer catalog the new data source will be stored. This does not affect file placement."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:80
msgid "Select the name of an existing workspace and store."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:84
msgid "Target workspace and store in GeoServer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:86
msgid "Alternately, select :guilabel:`Create New` and type in a names for a new workspace or store. During the import process, these will be created."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:90
msgid "Creating a new workspace and store"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:93
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:99
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:72
msgid "Recent imports"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:95
msgid "This section will list previous imports, and whether they were successful or not. Items can be removed from this list with the :guilabel:`Remove` button, but otherwise cannot be edited."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:101
msgid "When ready to continue to the next page, click :guilabel:`Next`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:104
msgid "Layer listing page"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:106
msgid "On the next page will be a list of layers found by the Layer Importer. The layers will be named according to the source content's name (file name of database table name). For each entry there will be a :guilabel:`Status` showing if the source is ready to be imported."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:108
msgid "All layers will be selected for import by default, but can be deselected here by unchecking the box next to each entry."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:112
msgid "List of layers to be imported"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:114
msgid "A common issue during the import process is when a CRS cannot be determined for a given layer. In this case, a dialog box will display where the CRS can be declared explicitly. Enter the CRS and Click :guilabel:`Apply`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:118
msgid "Declaring a CRS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:120
msgid "When ready to perform the import, click :guilabel:`Import`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:122
msgid "Each selected layer will be added to the GeoServer catalog inside a new or existing store, and published as a layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:124
msgid "After the import is complete the status area will refresh showing if the import was successful for each layer. If successful, a dialog box for previewing the layer will be displayed, with options for :guilabel:`Layer Preview` (OpenLayers), :guilabel:`Google Earth`, and :guilabel:`GeoExplorer`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:128
msgid "Layers successfully imported"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:131
msgid "Advanced import settings page"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:133
msgid "The :guilabel:`Advanced` link next to each layer will lead to the Advanced import settings page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:135
msgid "On this page, data can be set to be reprojected from one CRS to another during the import process. To enable reprojection, select the :guilabel:`Reprojection` box, and enter the source and target CRS."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:137
msgid "In addition, on this page attributes can be renamed and their type changed. Click on the :guilabel:`Add` link under :guilabel:`Attribute Remapping` to select the attribute to alter, its type, and its new name. Click :guilabel:`Apply` when done."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:139
msgid "Click :guilabel:`Save` when finished."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\guireference.rst:143
msgid "Advanced layer list page"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:4
msgid "GeoServer Importer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:6
msgid "The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:8
msgid "There are two primary advantages to using the Importer over the standard GeoServer data-loading workflow:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:10
msgid "**Supports batch operations** (loading and publishing multiple spatial files or database tables in one operation)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:12
msgid "**Creates unique styles** for each layer, rather than linking to the same (existing) styles."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\index.rst:14
msgid "This section will discuss the Importer extension."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:4
msgid "Installing the Importer extension"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:6
msgid "The Importer extension is an official extension, available on the `GeoServer download <http://geoserver.org/download>`_ page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:8
msgid "Download the extension for your version of GeoServer. (If you see an option, select :guilabel:`Core`.)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:10
msgid "Make sure to match the version of the extension to the version of GeoServer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:12
msgid "Extract the archive and copy the contents into the GeoServer :file:`WEB-INF/lib` directory."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:14
msgid "Restart GeoServer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:16
msgid "To verify that the extension was installed successfully, open the :ref:`web_admin` and look for an :guilabel:`Import Data` option in the :guilabel:`Data` section on the left-side menu."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:20
msgid "Importer extension successfully installed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\installing.rst:22
msgid "For additional information please see the section on :ref:`extensions_importer_using`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:4
msgid "Importer REST API examples"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:7
msgid "Mass configuring a directory of shapefiles"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:9
msgid "In order to initiate an import of the ``c:\\data\\tasmania`` directory into the existing ``tasmania`` workspace the following JSON will be POSTed to GeoServer::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:25
msgid "This curl command can be used for the purpose::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:29
msgid "The importer will locate the files to be imported, and automatically prepare the tasks, returning the following response::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:73
msgid "After checking every task is ready, the import can be initiated by executing a POST on the import resource::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:77
msgid "The resource can then be monitored for progress, and eventually final results::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:81
msgid "Which in case of successful import will look like::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:126
msgid "Configuring a shapefile with no projection information"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:128
msgid "In this case, let's assume we have a single shapefile, tasmania_cities.shp, that does not have the .prj anciliary file (the example is equally good for any case where the prj file contents cannot be matched to an official EPSG code)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:131
msgid "We are going to post the following import definition::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:147
msgid "With the usual curl command::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:151
msgid "The response in case the CRS is missing will be::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:179
msgid "Drilling into the task layer we can see the srs information is missing::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:227
msgid "The following PUT request will update the SRS::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:231
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:376
msgid "Where ``layerUpdate.json`` is::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:239
msgid "Getting the import definition again, we'll find it ready to execute::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:267
msgid "A POST request will make it execute::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:271
msgid "And eventually succeed::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:300
msgid "Uploading a CSV file to PostGIS while transforming it"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:302
msgid "A remote sensing tool is generating CSV files with some locations and measurements, that we want to upload into PostGIS as a new spatial table. The CSV file looks as follows::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:313
msgid "First, we are going to create a empty import with an existing postgis store as the target::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:317
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:417
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:484
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:543
msgid "Where import.json is::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:334
msgid "Then, we are going to POST the csv file to the tasks list, in order to create an import task for it::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:338
msgid "And we are going to get back a new task definition, with a notification that the CRS is missing::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:372
msgid "As before, we are going to force the CRS by updating the layer::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:384
msgid "Then, we are going to create a transformation mapping the Lat/Lon columns to a point::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:392
msgid "The above will be uploaded to GeoServer as follows::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:396
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:464
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:526
msgid "Now the import is ready to run, and we'll execute it using::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:400
msgid "If all goes well the new layer is created in PostGIS and registered in GeoServer as a new layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:402
msgid "In case the features in the CSV need to be appended to an existing layer a PUT request against the task might be performed, changing its updateMode from \"CREATE\" to \"APPEND\". Changing it to \"REPLACE\" instead will preserve the layer, but remove the old conents and replace them with the newly uploaded ones."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:407
msgid "Uploading and optimizing a GeoTiff with ground control points"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:409
msgid "A data supplier is periodically providing GeoTiffs that we need to configure in GeoServer. The GeoTIFF is referenced via Ground Control Points, is organized by stripes, and has no overviews. The objective is to rectify, optimize and publish it via the importer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:413
msgid "First, we are going to create a empty import with no store as the target::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:429
msgid "Then, we are going to POST the GeoTiff file to the tasks list, in order to create an import task for it::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:433
msgid "We are then going to append the transformations to rectify (gdalwarp), retile (gdal_translate) and add overviews (gdaladdo) to it::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:440
msgid "``warp.json`` is::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:448
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:510
msgid "``gtx.json`` is::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:455
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:517
msgid "``gad.json`` is::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:468
msgid "A new layer ``box_gcp_fixed`` layer will appear in GeoServer, with an underlying GeoTiff file ready for web serving."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:472
msgid "Adding a new granule into an existing mosaic"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:474
msgid "A data supplier is periodically providing new time based imagery that we need to add into an existing mosaic in GeoServer. The imagery is in GeoTiff format, and lacks a good internal structure, which needs to be aligned with the one into the other images."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:479
msgid "First, we are going to create a import with an indication of where the granule is located, and the target store:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:482
msgid "curl -u admin:geoserver -XPOST -H \"Content-type: application/json\" -d @import.json \"http://localhost:8080/geoserver/rest/imports\""
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:505
msgid "We are then going to append the transformations to harmonize the file with the rest of the mosaic::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:530
msgid "The new granule will be ingested into the mosaic, and will thus be available for time based requests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:533
msgid "Asynchronously fetching and importing data from a remote server"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:535
msgid "We assume a remote FTP server contains multiple shapefiles that we need to import in GeoServer as new layers. The files are large, and the server has much better bandwith than the client, so it's best if GeoServer performs the data fetching on its own."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:539
msgid "In this case a asynchronous request using ``remote`` data will be the best fit::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:561
msgid "The request will return immediately with an import context in \"INIT\" state, and it will remain in such state until the data is fetched and the tasks created. Once the state switches to \"PENDING\" the import will be ready for execution. Since there is a lot of shapefiles to process, also the import run will be done in asynchronous mode::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_examples.rst:568
msgid "The response will return immediately in this case as well, and the progress can be followed as the tasks in the import switch state."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:4
msgid "REST API"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:7
msgid "Importer concepts"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:9
msgid "The importer REST api is built around a tree of objects representing a single import, structured as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:17
msgid "import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:12
msgid "target workspace"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:13
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:15
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:145
msgid "data"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:17
msgid "task (one or more)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:16
msgid "layer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:17
msgid "transformation (one or more)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:19
msgid "An **import** refers to the top level object and is a \"session\" like entity the state of the entire import. It maintains information relevant to the import as a whole such as user infromation, timestamps along with optional information that is uniform along all tasks, such as a target workspace, the shared input data (e.g., a directory, a database). An import is made of any number of task objects."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:23
msgid "A **data** is the description of the source data of a import (overall) or a task. In case the import has a global data definition, this normally refers to an aggregate store such as a directory or a database, and the data associated to the tasks refers to a single element inside such aggregation, such as a single file or table."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:26
msgid "A **task** represents a unit of work to the importer needed to register one new layer, or alter an existing one, and contains the following information:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:28
msgid "The data being imported"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:29
msgid "The target store that is the destination of the import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:30
msgid "The target layer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:31
msgid "The data of a task, referred to as its source, is the data to be processed as part of the task."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:32
msgid "The transformations that we need to apply to the data before it gets imported"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:34
msgid "This data comes in a variety of forms including:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:36
msgid "A spatial file (Shapefile, GeoTiff, KML, etc...)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:37
msgid "A directory of spatial files"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:38
msgid "A table in a spatial database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:39
msgid "A remote location that the server will download data from"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:41
msgid "A task is classified as either \"direct\" or \"indirect\". A *direct task* is one in which the data being imported requires no transformation to be imported. It is imported directly. An example of such a task is one that involves simply importing an existing Shapefile as is. An *indirect task* is one that does require a **transformation** to the original import data. An example of an indirect task is one that involves importing a Shapefile into an existing PostGIS database. Another example of indirect task might involve taking a CSV file as an input, turning a x and y column into a Point, remapping a string column into a timestamp, and finally import the result into a PostGIS."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:47
msgid "REST API Reference"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:52
msgid "All the imports"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:55
msgid "/imports"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:60
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:207
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:284
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:387
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:441
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:484
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:561
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:617
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:649
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:731
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:799
msgid "Method"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:61
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:208
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:285
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:388
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:442
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:485
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:562
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:618
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:650
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:732
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:800
msgid "Action"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:62
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:209
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:286
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:389
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:443
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:486
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:563
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:619
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:651
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:733
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:801
msgid "Status Code/Headers"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:63
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:210
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:287
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:390
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:444
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:487
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:564
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:620
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:652
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:734
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:802
msgid "Input"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:65
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:212
msgid "Parameters"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:67
msgid "Retrieve all imports"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:68
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:215
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:236
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:291
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:394
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:399
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:404
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:448
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:491
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:496
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:568
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:624
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:656
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:661
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:738
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:806
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:811
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:816
msgid "200"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:69
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:71
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:75
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:216
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:218
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:222
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:223
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:231
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:233
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:237
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:238
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:239
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:292
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:395
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:405
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:406
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:449
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:492
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:497
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:498
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:569
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:625
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:657
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:739
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:807
msgid "n/a"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:70
msgid ":ref:`Import Collection <import_collection>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:73
msgid "Create a new import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:74
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:230
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:296
msgid "201 with Location header"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:76
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:217
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:232
msgid ":ref:`Imports <import>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:77
msgid "async=false/true"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:80
msgid "Retrieving the list of all imports"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:86
msgid "results in::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:105
msgid "Creating a new import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:107
msgid "Posting to the /imports path a import json object creates a new import session::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:130
msgid "The parameters are:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:136
msgid "Name"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:137
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:870
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:889
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:907
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:922
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:940
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:955
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:974
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:990
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1006
msgid "Optional"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:138
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:871
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:890
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:908
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:923
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:941
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:956
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:975
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:991
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1007
msgid "Description"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:139
msgid "targetWorkspace"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:140
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:143
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:146
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:928
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:958
msgid "Y"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:141
msgid "The target workspace to import to"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:142
msgid "targetStore"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:144
msgid "The target store to import to"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:147
msgid "The data to be imported"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:149
msgid "The mere creation does not start the import, but it may automatically populate its tasks depending on the target. For example, by referring a directory of shapefiles to be importer, the creation will automatically fill in a task to import each of the shapefiles as a new layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:152
msgid "The response to the above POST request will be::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:190
msgid "The operation of populating the tasks can require time, especially if done against a large set of files, or against a \"remote\" data (more on this later), in this case the POST request can include ``?async=true`` at the end of the URL to make the importer run it asynchronously. In this case the import will be created in INIT state and will remain in such state until all the data transfer and task creation operations are completed. In case of failure to fetch data the import will immediately stop, the state will switch to the ``INIT_ERROR`` state, and a error message will appear in the import context \"message\" field."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:199
msgid "Import object"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:202
msgid "/imports/<importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:214
msgid "Retrieve import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:220
msgid "Execute import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:221
msgid "204"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:224
msgid "async=true/false"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:226
msgid "Create import with proposed id <importId>. If the proposed id is ahead of the current (next) id, the current id will be advanced. If the proposed id is less than or equal to the current id, the current will be used. This allows an external system to dictate the id management."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:235
msgid "Remove import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:241
msgid "The representation of a import is the same as the one contained in the import creation response. The execution of a import can be a long task, as such, it's possible to add ``async=true`` to the request to make it run in a asynchronous fashion, the client will have to poll the import representation and check when it reaches the \"COMPLETE\" state."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:247
msgid "Data"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:249
msgid "A import can have a \"data\" representing the source of the data to be imported. The data can be of different types, in particular, \"file\", \"directory\", \"mosaic\", \"database\" and \"remote\". During the import initialization the importer will scan the contents of said resource, and generate import tasks for each data found in it."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:254
msgid "Most data types are discussed in the task section, the only type that's specific to the whole import context is the \"remote\" one, that is used to ask the importer to fetch the data from a remote location autonomusly, without asking the client to perform an upload."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:258
msgid "The representation of a remote resource looks as follows::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:268
msgid "The location can be `any URI supported by Commons VFS <http://commons.apache.org/proper/commons-vfs/filesystems.html>`_, including HTTP and FTP servers. The ``username``, ``password`` and ``domain`` elements are all optional, and required only if the remote server demands an authentication of sorts. In case the referred file is compressed, it will be unpacked as the download completes, and the tasks will be created over the result of unpacking."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:274
msgid ">>>>>>> 296f581... [GEOS-7049] Allow autonomous and asynchonous data fetching in importer REST api Tasks ^^^^^"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:279
msgid "/imports/<importId>/tasks"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:290
msgid "Retrieve all tasks for import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:293
msgid ":ref:`Task Collection <importer_rest_reference_tasks>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:295
msgid "Create a new task"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:297
msgid ":ref:`Multipart form data <importer_rest_reference_fileupload>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:298
msgid ":ref:`Tasks <importer_rest_reference_tasks>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:303
msgid "Getting the list of tasks"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:309
msgid "Results in::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:325
msgid "Creating a new task as a file upload"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:327
msgid "A new task can be created by issuing a POST to ``imports/<importId>/tasks`` as a \"Content-type: multipart/form-data\" multipart encoded data as defined by `RFC 2388 <https://www.ietf.org/rfc/rfc2388.txt>`_. One or more file can be uploaded this way, and a task will be created for importing them. In case the file being uploaded is a zip file, it will be unzipped on the server side and treated as a directory of files."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:330
msgid "The response to the upload will be the creation of a new task, for example::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:368
msgid "Creating a new task from form upload"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:370
msgid "This creation mode assumes the POST to ``imports/<importId>/tasks`` of form url encoded data containing a ``url`` parameter::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:376
msgid "The creation response will be the same as the multipart upload."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:379
msgid "Single task resource"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:382
msgid "/imports/<importId>/task/<taskId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:393
msgid "Retrieve task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:396
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:400
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:401
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:450
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:493
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:662
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:663
msgid ":ref:`Task <importer_rest_reference_tasks>`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:398
msgid "Modify task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:403
msgid "Remove task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:408
msgid "The representation of a task resource is the same one reported in the task creation response."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:411
msgid "Updating a task"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:413
msgid "A PUT request over an existing task can be used to update its representation. The representation can be partial, and just contains the elements that need to be updated."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:416
msgid "The updateMode of a task normally starts as \"CREATE\", that is, create the target resource if missing. Other possible values are \"REPLACE\", that is, delete the existing features in the target layer and replace them with the task source ones, or \"APPEND\", to just add the features from the task source into an existing layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:420
msgid "The following PUT request updates a task from \"CREATE\" to \"APPEND\" mode::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:431
msgid "Directory files representation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:433
msgid "The following operations are specific to data objects of type ``directory``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:436
msgid "/imports/<importId>/task/<taskId>/data/files"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:447
msgid "Retrieve the list of files for a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:452
msgid "The response to a GET request will be::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:479
msgid "/imports/<importId>/task/<taskId>/data/files/<fileId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:490
msgid "Retrieve the file with id <fileId> from the data of a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:495
msgid "Remove a specific file from the task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:501
msgid "Following the links we'll get to the representation of a single file, notice how in this case a main file can be associate to sidecar files::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:520
msgid "Mosaic extensions"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:522
msgid "In case the input data is of ``mosaic`` type, we have all the attributes typical of a directory, plus support for directly specifying the timestamp of a particular granule."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:525
msgid "In order to specify the timestamp a PUT request can be issued against the granule::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:533
msgid "and the response will be::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:550
msgid "Database data"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:552
msgid "The following operations are specific to data objects of type ``database``. At the time or writing, the REST API does not allow the creation of a database data source, but it can provide a read only description of one that has been created using the GUI."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:556
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:612
msgid "/imports/<importId>/tasks/<taskId>/data"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:567
msgid "Retrieve the database connection parameters for a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:570
msgid "List of database connection parameters and available tables"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:572
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:628
msgid "Performing a GET on a database type data will result in the following response::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:605
msgid "Database table"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:607
msgid "The following operations are specific to data objects of type ``table``. At the time or writing, the REST API does not allow the creation of a database data source, but it can provide a read only description of one that has been created using the GUI. A table description is normally linked to task, and refers to a database data linked to the overall import."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:623
msgid "Retrieve the table description for a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:626
msgid "A table representation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:639
msgid "Task target layer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:642
msgid "/imports/<importId>/tasks/<taskId>/layer"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:644
msgid "The layer defines how the target layer will be created"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:655
msgid "Retrieve the layer of a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:658
msgid "A layer JSON representation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:660
msgid "Modify the target layer for a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:666
msgid "Requesting the task layer will result in the following::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:719
msgid "All the above attributes can be updated using a PUT request. Even if the above representation is similar to the REST config API, it should not be confused with it, as it does not support all the same properties, in particular the supported properties are all the ones listed above."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:723
msgid "Task transformations"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:726
msgid "/imports/<importId>/tasks/<taskId>/transforms"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:737
msgid "Retrieve the list of transformations of a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:740
msgid "A list of transfromations in JSON format"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:742
msgid "Create a new transormation and append it inside a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:744
msgid "A JSON transformation representation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:745
msgid "The transform location"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:748
msgid "Retrieving the transformation list"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:750
msgid "A GET request for the list of transformations will result in the following response::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:773
msgid "Appending a new transformation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:775
msgid "Creating a new transformation requires posting a JSON document with a ``type`` property identifying the class of the transformation, plus any extra attribute required by the transformation itself (this is transformation specific, each one will use a different set of attributes)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:778
msgid "The following POST request creates an attribute type remapping::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:788
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:846
msgid "The response will be::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:794
msgid "/imports/<importId>/tasks/<taskId>/transforms/<transformId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:805
msgid "Retrieve a transformation identified by <transformId> inside a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:808
msgid "A single transformation in JSON format"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:810
msgid "Modifies the definition of a transformation identified by <transformId> inside a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:812
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:817
msgid "A JSON transformation representation (eventually just the portion of it that needs to be modified)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:813
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:818
msgid "The full transformation representation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:815
msgid "Removes the transformation identified by <transformId> inside a task with id <taskId> within import with id <importId>"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:821
msgid "Retrieve a single transformation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:823
msgid "Requesting a single transformation by identifier will result in the following response::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:836
msgid "Modify an existing transformation"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:838
msgid "Assuming we have a reprojection transformation, and that we need to change the target SRS type, the following PUT request will do the job::"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:859
msgid "Transformation reference"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:862
msgid "AttributeRemapTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:864
msgid "Remaps a certain field to a given target data type"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:869
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:888
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:906
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:921
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:939
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:954
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:973
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:989
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1005
msgid "Parameter"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:872
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:909
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:924
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:942
msgid "field"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:873
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:876
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:892
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:895
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:910
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:925
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:943
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:961
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:977
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:993
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1009
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1012
msgid "N"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:874
msgid "The name of the field to be remapped"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:875
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:960
msgid "target"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:877
msgid "The \"target\" field type, as a fully qualified Java class name"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:881
msgid "AttributesToPointGeometryTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:883
msgid "Transforms two numeric fields ``latField`` and ``lngField`` into a point geometry representation ``POINT(lngField,latField)``, the source fields will be removed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:891
msgid "latField"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:893
msgid "The \"latitude\" field"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:894
msgid "lngField"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:896
msgid "The \"longitude\" field"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:899
msgid "CreateIndexTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:901
msgid "For database targets only, creates an index on a given column after importing the data into the database"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:911
msgid "The field to be indexed"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:914
msgid "DateFormatTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:916
msgid "Parses a string representation of a date into a Date/Timestamp object"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:926
msgid "The field to be parsed"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:927
msgid "format"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:929
msgid "A date parsing pattern, setup using the Java `SimpleDateFormat syntax <http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html>`_. In case it's missing, a number of built-in formats will be tried instead (short and full ISO date formats, dates without any separators)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:932
msgid "IntegerFieldToDateTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:934
msgid "Takes a integer field and transforms it to a date, interpreting the intereger field as a date"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:944
msgid "The field containing the year information"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:947
msgid "ReprojectTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:949
msgid "Reprojects a vector layer from a source CRS to a target CRS"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:957
msgid "source"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:959
msgid "Identifier of the source coordinate reference system (the native one will be used if missing)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:962
msgid "Identifier of the target coordinate reference system"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:965
msgid "GdalTranslateTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:967
msgid "Applies ``gdal_translate`` to a single file raster input. Requires ``gdal_translate`` to be inside the PATH used by the web container running GeoServer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:976
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:992
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1008
msgid "options"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:978
msgid "Array of options that will be passed to ``gdal_translate`` (beside the input and output names, which are internally managed)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:981
msgid "GdalWarpTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:983
msgid "Applies ``gdalwarp`` to a single file raster input. Requires ``gdalwarp`` to be inside the PATH used by the web container running GeoServer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:994
msgid "Array of options that will be passed to ``gdalwarp`` (beside the input and output names, which are internally managed)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:997
msgid "GdalAddoTransform"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:999
msgid "Applies ``gdaladdo`` to a single file raster input. Requires ``gdaladdo`` to be inside the PATH used by the web container running GeoServer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1010
msgid "Array of options that will be passed to ``gdaladdo`` (beside the input file name, which is internally managed)"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1011
msgid "levels"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\rest_reference.rst:1013
msgid "Array of integers with the overview levels that will be passed to ``gdaladdo``"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:4
msgid "Using the Importer extension"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:6
msgid "Here are step-by-step instructions to import multiple shapefiles in one operation. For more details on different types of operations, please see the :ref:`extensions_importer_guireference`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:8
msgid "Find a directory of shapefiles and copy into your :ref:`data_directory`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:10
msgid "You can always use the `Natural Earth Quickstart <http://www.naturalearthdata.com/downloads/>`_ data for this task."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:12
msgid "Log in as an administrator and navigate to the :guilabel:`Data --> Import Data` page."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:14
msgid "For select :guilabel:`Spatial Files` as the data source."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:18
msgid "Data source"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:20
msgid "Click :guilabel:`Browse` to navigate to the directory of shapefiles to be imported."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:22
msgid "The web-based file browser will show as options your home directory, data directory, and the root of your file system (or drive). In this case, select :guilabel:`Data directory`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:26
msgid "Directory"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:28
msgid "Back on the main form, select :guilabel:`Create new` next to :guilabel:`Workspace`, and enter :kbd:`ne` to denote the workspace."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:30
msgid "Make sure the :guilabel:`Store` field reads :guilabel:`Create new` as well."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:34
msgid "Import target workspace"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:36
msgid "Click :guilabel:`Next` to start the import process."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:38
msgid "On the next screen, any layers available for import will be shown."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:40
msgid "Non-spatial files will be ignored."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:44
msgid "Import layer list"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:46
msgid "In most cases, all files will be ready for import, but if the the spatial reference system (SRS) is not recognized, you will need to manually input this but clicking :guilabel:`Advanced`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:48
msgid "You will need to manually input the SRS if you used the Natural Earth data above. For each layer click on :guilabel:`Advanced` and set reprojection to :kbd:`EPSG:4326`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:52
msgid "Advanced import settings"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:54
msgid "Check the box next to each layer you wish to import."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:58
msgid "Setting the layers to import"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:60
msgid "When ready, click :guilabel:`Import`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:62
msgid "Don't click :guilabel:`Done` at this point, otherwise the import will be canceled."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:64
msgid "The results of the import process will be shown next to each layer."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:66
msgid "When finished, click :guilabel:`Done`."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\importer\using.rst:68
msgid "Recent import processes are listed at the bottom of the page. You may wish to visit these pages to check if any difficulties were encountered during the import process or import additional layers."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\006_geonode_apis\index.rst:4
msgid "GeoNode APIs"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:4
msgid "Testing in GeoNode"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:6
msgid "The community encourages the Test Driven Development (TDD) and the contribution to write new tests to extend the coverage. Ideally every model, view, and utility should becovered by tests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:8
msgid "GeoNode has Unit, Integration and Javascript tests. The Unit tests are located in the tests file of every django app (Maps, Layers, Documents, Catalogue, Search, Security etc)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:10
msgid "The Integration, CSW and smoke tests are located under the tests folder)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:12
msgid "The tests are meant to be ran using the SQLite database, some of them may fail using PostgreSQL or others. Therefore **remove or rename your local_settings.py file before running the tests**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:15
msgid "If running them in development mode make sure to have the jetty server"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:15
msgid "shut down otherwise the test could get stuck. To make sure it is run:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:22
msgid "Unit Tests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:24
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:55
msgid "To run the unit tests make sure you have the virtualenv active (if running GeoNode under virtualenv) then run:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:30
msgid "This will produce a detailed test report."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:32
msgid "It's possible to run just specific apps tests by using the django command:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:44
msgid "To run a single testcase or method (omit the method name to run the whole class), for example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:50
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:79
msgid "These tests are based on the Python/django unit test suite."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:53
msgid "Integration Tests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:61
msgid "To run the csw integration test run:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:67
msgid "Like the unit tests above, it is also possible to test specific modules, for example:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:73
msgid "To test with with coverage:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:82
msgid "Javascript Tests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\007_geonode_testing\index.rst:84
msgid "Javascript tests has been currently disabled in GeoNode. There is a plan to improve and re-enable them in the future."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:5
msgid "Contributing to Open Source on GitHub"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:7
#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:7
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:7
msgid "This section is freely adapted from the official `GitHub guides <https://guides.github.com>`_."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:9
msgid "A great way to get involved in open source is to contribute to the existing projects you’re using."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:12
msgid "A Typical GitHub Project Structure"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:15
msgid "The Community"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:17
msgid "Projects often have a community around them, made up of other users in different (formal or informal) roles:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:19
msgid "**Owner** is the user or organization that created the project has the project on their account."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:20
msgid "**Maintainers** and Collaborators are the users primarily doing the work on a project and driving the direction. Oftentimes the owner and the maintainer are the same. They have write access to the repository."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:21
msgid "**Contributors** is everyone who has had a pull request merged into a project."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:22
msgid "**Community** Members are the users who often use and care deeply about the project and are active in discussions for features and pull requests."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:25
msgid "Readme"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:27
msgid "Nearly all GitHub projects include a README.md file. The readme provides a lay of the land for a project with details on how to use, build and sometimes contribute to a project."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:30
msgid "License"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:32
msgid "A `LICENSE` file, well, is the license for the project. An open source project’s license informs users what they can and can’t do (e.g., use, modify, redistribute), and contributors, what they are allowing others to do."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:35
msgid "Documentation and Wikis"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:37
msgid "Many larger projects go beyond a readme to give instructions for how people can use their project. In such cases you’ll often find a link to another file or a folder named `docs` in the repository."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:42
msgid "Alternatively, the repository may instead use the GitHub wiki to break down documentation."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:48
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:10
msgid "Issues"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:50
msgid "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. They’re kind of like email—except they can be shared and discussed with the rest of your team. Most software projects have a bug tracker of some kind. GitHub’s tracker is called Issues, and has its own section in every repository."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:55
msgid "For more information on how Issues work, see the section \":ref:`work_with_github`\""
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:58
#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:146
msgid "Pull Requests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:60
msgid "If you’re able to patch the bug or add the feature yourself, make a pull request with the code. Be sure you’ve read any documents on contributing, understand the license and have signed a CLA if required."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:63
msgid "Once you’ve submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\contrib_on_github.rst:65
msgid "For more information on how Pull Requests work, see the section \":ref:`work_with_github`\""
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:5
msgid "Contributing to GeoNode"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:9
msgid "If you are interested in helping us to make GeoNode, there are many ways to do so."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:12
msgid "Participate in the Discussion"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:14
msgid "GeoNode has a mailing list (https://groups.google.com/d/forum/geonode-users) where users can ask and answer questions about the software. There are also IRC chats on Gitter where users (https://gitter.im/GeoNode/general) and developers (https://gitter.im/GeoNode) can discuss GeoNode in real time. Sometimes users also post interesting tips for managing sites running GeoNode. If you want to help out with GeoNode, one easy way is to sign up for the mailing list and help answer questions."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:20
msgid "Report Problems on the Issue Tracking System"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:22
msgid "Informative bug reports are a key part of the bug fixing process, so if you do run into a problem with GeoNode, please don't hesitate to report it on our bug tracker, available online at http://github.com/GeoNode/geonode/issues. Useful information for bug reports includes:"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:25
msgid "What were you doing when the bug occurred? Does the problem occur every time you do that, or only occasionally?"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:27
msgid "What were you expecting to happen? What happened instead?"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:29
msgid "What version of the software are you using? Please also note any changes from the default configuration."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:31
msgid "If there is a data file involved in the bug (such as a Shapefile that doesn't render properly), please consider including it in the bug report. Be aware that not all data files are freely distributable."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:34
msgid "To help GeoNode to better address the issue you can tag the ticket with one or more lables that you can find on the side column."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:38
msgid "Write Documentation"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:40
msgid "GeoNode's documentation can always use improvement - there are always more questions to be answered. For managing contributions to the manual, GeoNode uses a process similar to that used for managing the code itself. The documentation is generated from source files in the `docs/` directory within the GeoNode source repository. See http://sphinx.pocoo.org/ for more information on the documentation system GeoNode uses."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:45
msgid "If you want to learn more about contributing to the documentation, please go ahead to the \"`How to contribute to GeoNode’s Documentation <http://docs.geonode.org/en/latest/organizational/contribute/contribute_to_documentation.html#contrib-docu>`_\". GeoNode also have some guidelines to help with writing once you are set up \"`How to write Documentation <http://docs.geonode.org/en/latest/organizational/contribute/documentation_guidelines.html#doc-guidelines>`_\"."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:49
msgid "Provide Translations"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:51
msgid "If GeoNode doesn't provide a user interface in your native language, consider contributing a new translation. To get started here are the instructions \"`How to contribute to GeoNode’s Translation <http://docs.geonode.org/en/latest/organizational/contribute/contribute_to_translation.html>`_\"."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:55
msgid "Write Code"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:57
msgid "Of course since GeoNode is an open source project which encourages contributions of source code as well. If you are interested in making small changes, you can find an open ticket on http://github.com/GeoNode/geonode/issues, hack away, and get started on the \"`Patch Review Process <http://docs.geonode.org/en/latest/organizational/contribute/review_criteria.html>`_\"."
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:61
msgid "Further Reading"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:63
msgid ":ref:`contrib_on_github`"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:65
msgid ":ref:`work_with_github`"
msgstr ""

#: ..\..\005_dev_workshop\008_contribute_geonode\index.rst:67
msgid ":ref:`roadmap`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:5
msgid "Roadmap Process"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:8
msgid "The GeoNode Roadmap Process is designed to complement the more technical **GeoNode Improvement Proposals** and strives to make it easier for the various organizations invested in GeoNode to collaborate on features of common interest."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:10
msgid "It is based on the \"`roadmap items <https://spreadsheets.google.com/a/opengeo.org/spreadsheet/ccc?key=0AklXlBUnMqOrdDNackdvX3ZRS0Fha0xCeGhjSjZ1dEE>`_\" developed at the `GeoNode Roadmapping Summit <http://geonode.org/2011/05/roadmapping-summit/>`_ held in May 2011."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:12
msgid "Overall, the process for adding items to the collective roadmap is as follows:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:14
msgid "Organizational partner has an intent to add a feature to the roadmap."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:15
msgid "Organizational partner communicates with the `organizational partners list <https://groups.google.com/a/opengeo.org/group/geonode-org/>`_ about the change to gauge interest and determine who else is committed to making it happen."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:16
msgid "Organizational partner creates a feature specification on the wiki to further flesh out the idea."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:17
msgid "Organizational partner finds a committer on the `developer list <https://groups.google.com/a/opengeo.org/group/geonode-dev/>`_ to shepherd the roadmap item through the **GeoNode Improvement Proposals**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:19
msgid "Each roadmap item will go through four stages:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:21
msgid "Descriptive Stage (under discussion/\"Active\")"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:22
msgid "Technical Stage"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:23
msgid "Development Stage"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:24
msgid "Released"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:26
msgid "After communicating on the `organizational partners list <https://groups.google.com/a/opengeo.org/group/geonode-org/>`_ the roadmap items enters the *Descriptive Stage* and must have a wiki page that lays out the description, user stories, and other interested parties. Optionally, the roadmap item will also include an idea of the difficulty and goals as well as any wireframes, technical diagrams, or prior art."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:28
msgid "A roadmap item enters the *Technical Stage* once a committer has been found to shepherd the roadmap item through the **GeoNode Improvement Proposals** process, then the wiki page must contain a clear sense of the technical assumptions, requirements or dependencies, and suggested implementation. Some roadmap items may need to be divided into multiple independent GNIP proposals."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\roadmap_process.rst:30
msgid "Once it passes through the **GeoNode Improvement Proposals** process, a roadmap item enters the *Development Stage* on its way to *Release*."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:5
msgid "Work With GitHub Issues and Pull Requests"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:12
msgid "An Issue is a note on a repository about something that needs attention. It could be a bug, a feature request, a question or lots of other things. On GitHub you can label, search and assign Issues, making managing an active project easier."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:14
msgid "For example, let’s take a look at `Bootstrap’s Issues section <https://github.com/twbs/bootstrap/issues>`_:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:19
msgid "GitHub’s issue tracking is special because of our focus on collaboration, references, and excellent text formatting. A typical issue on GitHub looks a bit like this:"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:24
msgid "A **title** and **description** describe what the issue is all about."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:26
msgid "Color-coded **labels** help you categorize and filter your issues (just like labels in email)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:28
msgid "A **milestone** acts like a container for issues. This is useful for associating issues with specific features or project phases (e.g. *Weekly Sprint 9/5-9/16 or Shipping 1.0*)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:30
msgid "One **assignee** is responsible for working on the issue at any given time."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:32
msgid "**Comments** allow anyone with access to the repository to provide feedback."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:35
msgid "Open an Issue"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:37
msgid "Click the Issues tab from the sidebar."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:42
msgid "Click New Issue."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:43
msgid "Give your Issue a title and description: *Add a new Logo to GeoNode custom*."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:48
msgid "Click **Submit new Issue** when you’re done. Now this issue has a permanent home (URL) that you can reference even after it is closed."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:51
msgid "Issues Pro Tips"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:53
msgid "**Check existing issues** for your issue. Duplicating an issue is slower for both parties so search through open and closed issues to see if what you’re running into has been addressed already."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:55
msgid "**Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:57
msgid "**Link to demos** recreating the problem on things like JSFiddle or CodePen."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:59
msgid "**Include system details** like what the browser, library or operating system you’re using and its version."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:61
msgid "**Paste error output** or logs in your issue or in a Gist. If pasting them in the issue, wrap it in three backticks: ``````` so that it renders nicely."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:64
msgid "Branching"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:66
msgid "**Branching** is the way to work on different parts of a repository at one time."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:68
msgid "When you create a repository, by default it has one branch with the name ``master``. You could keep working on this branch and have only one, that’s fine. But if you have another feature or idea you want to work on, you can create another branch, starting from ``master``, so that you can leave ``master`` in its working state."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:70
msgid "When you create a branch, you’re making a **copy** of the original branch as it was at that point in time (*like a photo snapshot*). If the original branch changes while you’re working on your new branch, no worries, you can always pull in those updates."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:75
msgid "At GeoNode developers use branches for keeping bug fixes and feature work separate from ``master`` (**production**) branch. When a feature or fix is ready, the branch is **merged** into master through a **Pull Request**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:78
msgid "To create a new branch"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:80
msgid "Go to the project folder and create a new branch"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:92
msgid "Check that you are working on the correct branch: ``add_logo``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:103
msgid "Push the new branch to GitHub."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:115
msgid "Make a commit"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:117
msgid "On GitHub, saved changes are called **commits**."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:119
msgid "Each commit has an associated **commit message**, which is a description explaining why a particular change was made. Thanks to these messages, you and others can read through commits and understand what you’ve done and why."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:121
msgid "Add a new logo to your custom GeoNode as described in the section :ref:`theme_admin`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:123
msgid "Stash the new files into the working project using ``git add``"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:134
msgid "**Commit** the changes providing a **commit messages** and push them into your branch : ``add_logo``."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:148
msgid "Pull Requests are the heart of collaboration on GitHub. When you make a pull request, you’re proposing your changes and requesting that someone pull in your contribution - aka merge them into their branch. GitHub’s Pull Request feature allows you to compare the content on two branches. The changes, additions and subtractions, are shown in green and red and called diffs (differences)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:150
msgid "As soon as you make a change, you can open a Pull Request. People use Pull Requests to start a discussion about commits (code review) even before the code is finished. This way you can get feedback as you go or help when you’re stuck."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:152
msgid "By using GitHub’s @mention system in your Pull Request message, you can ask for feedback from specific people or teams."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:155
msgid "Create a Pull Request for changes to the Logo"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:157
msgid "Click the Pull Request icon on the sidebar, then from the Pull Request page, click the green **New pull request** button."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:162
msgid "Select the branch you made, ``add_logo``, to compare with ``master`` (the original)."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:167
msgid "Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:172
msgid "When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:177
msgid "Give your pull request a title and since it relates directly to an open issue, include “fixes #” and the issue number in the title. Write a brief description of your changes."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:182
msgid "When you’re done with your message, click **Create pull request!**"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:185
msgid "Merge your Pull Request"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:187
msgid "It’s time to bring your changes together – merge your ``add_logo`` branch into the ``master`` (the original) branch."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:189
msgid "Click the green button to merge the changes into master. Click Confirm merge. Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\008_contribute_geonode\work_with_github.rst:196
msgid "If you revisit the issue you opened, it’s now closed! Because you included “fixes #1” in your Pull Request title, GitHub took care of closing that issue when the Pull Request was merged!"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:5
msgid "Developers Workshop"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:7
msgid "Welcome to the GeoNode Training `Developers Workshop` documentation v\\ |release|."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:9
msgid "This workshop will teach how to develop with and for the `GeoNode <http://geonode.org>`_ software application. This module will introduce you to the components that GeoNode is built with, the standards that it supports and the services it provides based on those standards, and an overview its architecture."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:13
msgid "*Prerequisites*"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:28
msgid ":ref:`intro_devel`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:37
msgid ":ref:`django_overview_index`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:33
msgid "Django's primary goal is to ease the creation of complex, database-driven websites. Django emphasizes reusability and \"pluggability\" of components, rapid development, and the principle of *don't repeat yourself*. Python is used throughout, even for settings, files, and data models."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:37
msgid "Django also provides an optional administrative create, read, update and delete interface that is generated dynamically through introspection and configured via admin models."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:40
msgid ":ref:`dev_core`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:47
msgid ":ref:`install_devmode`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:43
msgid "This module shows a step-by-step guide for the setup of a GeoNode Develeopment Environent on an Ubuntu system."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:45
msgid "For other Linux distributions the commands are similar, the difference is mainly on the packages names."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:50
msgid ":ref:`dev_debug`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:50
msgid "GeoNode can be difficult to debug as there are several different components involved. This module shows some tecniques to debug the different parts of GeoNode."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:53
msgid ":ref:`geonode_apis`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:53
msgid "This module provides an overview of the core modules and libraries used by GeoNode and teach to the user how to use them through some guided examples."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:56
msgid ":ref:`geonode_testing`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:56
msgid "This section explain how to run the tests on GeoNode."
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:58
msgid ":ref:`contributing_to_geonode`"
msgstr ""

#: C:\work\code\java\geonode\doc-geonode\005_dev_workshop\index.rst:59
msgid "Basic concepts about GitHub OpenSource Projects and best practices."
msgstr ""

